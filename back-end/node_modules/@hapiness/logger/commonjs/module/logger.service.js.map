{"version":3,"file":"logger.service.js","sourceRoot":"","sources":["../../../src/module/logger.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yCAA8D;AAC9D,yDAA+C;AAC/C,+BAA+B;AAC/B,MAAM,KAAK,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC;AAGjD,IAAa,aAAa,GAA1B;IAII,YAA2C,SAAU;QACjD,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,GAAG,IAAI;QAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAG,IAAI;QAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,IAAI,CAAC,GAAG,IAAI;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,IAAI,CAAC,GAAG,IAAI;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,GAAG,IAAI;QAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,GAAG,IAAI;QAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC;IACjD,CAAC;CAEJ,CAAA;AAtEY,aAAa;IADzB,iBAAU,EAAE;IAKI,WAAA,eAAQ,EAAE,CAAA,EAAE,WAAA,aAAM,CAAC,4BAAS,CAAC,CAAA;;GAJjC,aAAa,CAsEzB;AAtEY,sCAAa","sourcesContent":["import { Optional, Inject, Injectable } from '@hapiness/core';\nimport { LoggerExt } from './logger.extension';\nimport * as Debug from 'debug';\nconst debug = Debug('hapiness:extension:logger');\n\n@Injectable()\nexport class LoggerService {\n\n    private logger;\n\n    constructor(@Optional() @Inject(LoggerExt) loggerExt?) {\n        this.logger = loggerExt ? loggerExt : console;\n    }\n\n    /**\n     * Logging from external libraries used by your app or\n     * very detailed application logging.\n     *\n     * @param  {} ...args\n     */\n    public trace(...args) {\n        this.logger.trace.call(this.logger, ...args);\n    }\n\n    /**\n     * Anything else, i.e. too verbose to be included in \"info\" level.\n     *\n     * @param  {} ...args\n     */\n    public debug(...args) {\n        this.logger.debug.call(this.logger, ...args);\n    }\n\n    /**\n     * Detail on regular operation.\n     *\n     * @param  {} ...args\n     */\n    public info(...args) {\n        this.logger.info.call(this.logger, ...args);\n    }\n\n    /**\n     * A note on something that should probably be looked\n     * at by an operator eventually.\n     *\n     * @param  {} ...args\n     */\n    public warn(...args) {\n        this.logger.warn.call(this.logger, ...args);\n    }\n\n    /**\n     * Fatal for a particular request, but the service/app continues\n     * servicing other requests. An operator should look at this soon(ish).\n     *\n     * @param  {} ...args\n     */\n    public error(...args) {\n        this.logger.error.call(this.logger, ...args);\n    }\n\n    /**\n     * The service/app is going to stop or become unusable now.\n     * An operator should definitely look into this soon.\n     *\n     * @param  {} ...args\n     */\n    public fatal(...args) {\n        if (!this.logger.fatal) {\n            this.logger.error.call(this.logger, ...args);\n            return;\n        }\n        this.logger.fatal.call(this.logger, ...args);\n    }\n\n}\n"]}