"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@hapiness/core");
const logger_service_1 = require("./logger.service");
const logger_config_1 = require("./logger.config");
const chalk_1 = require("chalk");
let AccessLogs = class AccessLogs {
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.config = this.config || { accessLogs: true };
    }
    onEvent(request, reply) {
        if (!this.config.accessLogs) {
            reply.continue();
            return;
        }
        const statusCode = request.response.statusCode || request.response.output.statusCode;
        const data = {
            method: request.method,
            path: request.path,
            query: request.query,
            params: request.params,
            statusCode: statusCode
        };
        this.logger.info(`${this.getMethod(request.method)} ${request.path} ${this.getStatus(statusCode)}`, data);
        reply.continue();
    }
    /**
     * Get formatted status
     *
     * @param  {number} status
     */
    getStatus(status) {
        /* istanbul ignore if */
        if (status >= 400) {
            return chalk_1.default.red(status.toString());
        }
        else {
            return chalk_1.default.green(status.toString());
        }
    }
    /**
     * Get formatted method
     *
     * @param  {string} method
     */
    getMethod(method) {
        const _method = method.toUpperCase();
        /* istanbul ignore next */
        switch (_method) {
            case 'GET':
                return chalk_1.default.green.bold(_method);
            case 'POST':
                return chalk_1.default.yellow.bold(_method);
            case 'PUT':
                return chalk_1.default.blue.bold(_method);
            case 'DELETE':
                return chalk_1.default.red.bold(_method);
            default:
                return chalk_1.default.cyan.bold(_method);
        }
    }
};
AccessLogs = __decorate([
    core_1.Lifecycle({
        event: 'onPreResponse'
    }),
    __param(0, core_1.Optional()), __param(0, core_1.Inject(logger_config_1.LOGGER_CONFIG)),
    __metadata("design:paramtypes", [Object, logger_service_1.LoggerService])
], AccessLogs);
exports.AccessLogs = AccessLogs;
//# sourceMappingURL=logger.lifecycle.js.map