"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@hapiness/core");
const logger_extension_1 = require("./logger.extension");
const Debug = require("debug");
const debug = Debug('hapiness:extension:logger');
let LoggerService = class LoggerService {
    constructor(loggerExt) {
        this.logger = loggerExt ? loggerExt : console;
    }
    /**
     * Logging from external libraries used by your app or
     * very detailed application logging.
     *
     * @param  {} ...args
     */
    trace(...args) {
        this.logger.trace.call(this.logger, ...args);
    }
    /**
     * Anything else, i.e. too verbose to be included in "info" level.
     *
     * @param  {} ...args
     */
    debug(...args) {
        this.logger.debug.call(this.logger, ...args);
    }
    /**
     * Detail on regular operation.
     *
     * @param  {} ...args
     */
    info(...args) {
        this.logger.info.call(this.logger, ...args);
    }
    /**
     * A note on something that should probably be looked
     * at by an operator eventually.
     *
     * @param  {} ...args
     */
    warn(...args) {
        this.logger.warn.call(this.logger, ...args);
    }
    /**
     * Fatal for a particular request, but the service/app continues
     * servicing other requests. An operator should look at this soon(ish).
     *
     * @param  {} ...args
     */
    error(...args) {
        this.logger.error.call(this.logger, ...args);
    }
    /**
     * The service/app is going to stop or become unusable now.
     * An operator should definitely look into this soon.
     *
     * @param  {} ...args
     */
    fatal(...args) {
        if (!this.logger.fatal) {
            this.logger.error.call(this.logger, ...args);
            return;
        }
        this.logger.fatal.call(this.logger, ...args);
    }
};
LoggerService = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Optional()), __param(0, core_1.Inject(logger_extension_1.LoggerExt)),
    __metadata("design:paramtypes", [Object])
], LoggerService);
exports.LoggerService = LoggerService;
//# sourceMappingURL=logger.service.js.map