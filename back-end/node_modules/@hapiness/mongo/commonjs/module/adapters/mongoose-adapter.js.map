{"version":3,"file":"mongoose-adapter.js","sourceRoot":"","sources":["../../../../src/module/adapters/mongoose-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import * as mongoose from 'mongoose';\n\nimport { Observable } from 'rxjs/Observable';\nimport { HapinessMongoAdapter } from './hapiness-mongo-adapter';\nimport { Debugger } from '../shared';\n\nconst __debugger = new Debugger('MongooseAdapter');\n\n(<any>mongoose).Promise = global.Promise;\n\nexport class MongooseAdapter extends HapinessMongoAdapter {\n\n    public static getInterfaceName(): string {\n        return 'mongoose';\n    }\n\n    constructor(options) {\n        super(options);\n    }\n\n    protected _tryConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this._isReady = false;\n\n                if (this._db) {\n                    __debugger.debug('_tryConnect', 'db already exists');\n                    this._db.close();\n                }\n\n                const connectOptions = {\n                    server: {\n                        reconnectTries: Number.MAX_VALUE,\n                        reconnectInterval: 5000,\n                    },\n                };\n\n                this._connection = mongoose.createConnection(this._uri, connectOptions);\n\n                this._connection.once('connected', () => {\n                    __debugger.debug('_tryConnect', 'connection once connected');\n\n                    observer.next();\n                    observer.complete();\n                });\n\n                this._connection.once('error', err => {\n                    __debugger.debug('_tryConnect', `connection once error ${JSON.stringify(err, null, 2)}`);\n\n                    observer.error(err);\n                });\n            });\n    }\n\n    protected _afterConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this._db = this._connection.db;\n\n                this.onConnected().subscribe(_ => {\n                    __debugger.debug('_afterConnect', '(subscribe) On connected success');\n                }, (e) => {\n                    __debugger.debug('_afterConnect', `(subscribe) On connected failed ${JSON.stringify(e, null, 2)}`);\n                });\n\n                this._connection.once('error', err =>\n                    this.onError(err).subscribe(_ => {\n                        __debugger.debug('_afterConnect', '(subscribe) On connection error #success');\n                    }, (e) => {\n                        __debugger.debug('_afterConnect', `(subscribe) On connection error #failed ${JSON.stringify(e, null, 2)}`);\n                    })\n                );\n\n                this._connection.once('disconnected', () =>\n                    this.onDisconnected().subscribe(_ => {\n                        __debugger.debug('_afterConnect', '(subscribe) On connection disconnected #success');\n                    }, (e) => {\n                        __debugger.debug('_afterConnect', `(subscribe) On connection disconnected #failed ${JSON.stringify(e, null, 2)}`);\n                    })\n                );\n\n                observer.next();\n                observer.complete();\n            });\n    }\n\n    public getLibrary(): any {\n        return mongoose;\n    }\n\n    public registerValue(schema: any, collection: string) {\n        return this._connection.model(collection, schema);\n    }\n}\n"]}