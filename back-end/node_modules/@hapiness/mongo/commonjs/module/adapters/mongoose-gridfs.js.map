{"version":3,"file":"mongoose-gridfs.js","sourceRoot":"","sources":["../../../../src/module/adapters/mongoose-gridfs.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AACrC,gDAA6C;AAE7C,2DAA2E;AAC3E,qEAAgE;AAEhE,2BAAmC,SAAQ,6CAAoB;IAIpD,MAAM,CAAC,gBAAgB;QAC1B,MAAM,CAAC,iBAAiB,CAAC;IAC7B,CAAC;IAED,YAAY,OAAO;QACf,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAES,WAAW;QACjB,MAAM,CAAC,uBAAU;aACZ,MAAM,CAAC,QAAQ,CAAC,EAAE;YACf,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;YAED,MAAM,cAAc,GAAG;gBACnB,MAAM,EAAE;oBACJ,cAAc,EAAE,MAAM,CAAC,SAAS;oBAChC,iBAAiB,EAAE,IAAI;iBAC1B;aACJ,CAAC;YAEF,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YAExE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE;gBACpC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;gBACjC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACX,CAAC;IAES,mBAAmB,CAAC,EAAE,EAAE,KAAK;QACnC,MAAM,CAAC,kCAAkB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC;IAES,aAAa;QACnB,MAAM,CAAC,uBAAU;aACZ,MAAM,CAAC,QAAQ,CAAC,EAAE;YACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAE/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAElE,IAAI,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,CAAC,CAAC,CAAC;YAEjD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CACjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,CAAC,CAAC,CAClD,CAAC;YAEF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE,CACvC,IAAI,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,CAAC,CAAC,CACtD,CAAC;YAEF,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,aAAa,CAAC,MAAW,EAAE,UAAkB;QAChD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;IAEM,UAAU;QACb,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;CACJ;AA1ED,sDA0EC","sourcesContent":["import * as mongoose from 'mongoose';\nimport { Observable } from 'rxjs/Observable';\n\nimport { CreateGridFsStream, GridFsStream } from '../shared/gridfs-stream';\nimport { HapinessMongoAdapter } from './hapiness-mongo-adapter';\n\nexport class MongooseGridFsAdapter extends HapinessMongoAdapter {\n\n    private _gridfs: GridFsStream.Grid;\n\n    public static getInterfaceName(): string {\n        return 'mongoose-gridfs';\n    }\n\n    constructor(options) {\n        super(options);\n    }\n\n    protected _tryConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this._isReady = false;\n\n                if (this._db) {\n                    this._db.close();\n                }\n\n                const connectOptions = {\n                    server: {\n                        reconnectTries: Number.MAX_VALUE,\n                        reconnectInterval: 5000,\n                    },\n                };\n\n                this._connection = mongoose.createConnection(this._uri, connectOptions);\n\n                this._connection.once('connected', () => {\n                    observer.next();\n                    observer.complete();\n                });\n\n                this._connection.once('error', err => {\n                    observer.error(err);\n                });\n            });\n    }\n\n    protected _createGridFsStream(db, mongo) {\n        return CreateGridFsStream(db, mongo);\n    }\n\n    protected _afterConnect(): Observable<void> {\n        return Observable\n            .create(observer => {\n                this._db = this._connection.db;\n\n                this._gridfs = this._createGridFsStream(this._db, mongoose.mongo);\n\n                this.onConnected().subscribe(_ => {}, (e) => {});\n\n                this._connection.once('error', err =>\n                    this.onError(err).subscribe(_ => {}, (e) => {})\n                );\n\n                this._connection.once('disconnected', () =>\n                    this.onDisconnected().subscribe(_ => {}, (e) => {})\n                );\n\n                observer.next();\n                observer.complete();\n            });\n    }\n\n    public registerValue(schema: any, collection: string) {\n        return this._connection.model(collection, schema);\n    }\n\n    public getLibrary(): any {\n        return this._gridfs;\n    }\n}\n"]}