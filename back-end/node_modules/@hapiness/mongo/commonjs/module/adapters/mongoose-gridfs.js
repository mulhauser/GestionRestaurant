"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const Observable_1 = require("rxjs/Observable");
const gridfs_stream_1 = require("../shared/gridfs-stream");
const hapiness_mongo_adapter_1 = require("./hapiness-mongo-adapter");
class MongooseGridFsAdapter extends hapiness_mongo_adapter_1.HapinessMongoAdapter {
    static getInterfaceName() {
        return 'mongoose-gridfs';
    }
    constructor(options) {
        super(options);
    }
    _tryConnect() {
        return Observable_1.Observable
            .create(observer => {
            this._isReady = false;
            if (this._db) {
                this._db.close();
            }
            const connectOptions = {
                server: {
                    reconnectTries: Number.MAX_VALUE,
                    reconnectInterval: 5000,
                },
            };
            this._connection = mongoose.createConnection(this._uri, connectOptions);
            this._connection.once('connected', () => {
                observer.next();
                observer.complete();
            });
            this._connection.once('error', err => {
                observer.error(err);
            });
        });
    }
    _createGridFsStream(db, mongo) {
        return gridfs_stream_1.CreateGridFsStream(db, mongo);
    }
    _afterConnect() {
        return Observable_1.Observable
            .create(observer => {
            this._db = this._connection.db;
            this._gridfs = this._createGridFsStream(this._db, mongoose.mongo);
            this.onConnected().subscribe(_ => { }, (e) => { });
            this._connection.once('error', err => this.onError(err).subscribe(_ => { }, (e) => { }));
            this._connection.once('disconnected', () => this.onDisconnected().subscribe(_ => { }, (e) => { }));
            observer.next();
            observer.complete();
        });
    }
    registerValue(schema, collection) {
        return this._connection.model(collection, schema);
    }
    getLibrary() {
        return this._gridfs;
    }
}
exports.MongooseGridFsAdapter = MongooseGridFsAdapter;
//# sourceMappingURL=mongoose-gridfs.js.map