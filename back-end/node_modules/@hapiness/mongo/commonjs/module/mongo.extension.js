"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@hapiness/core");
const rxjs_1 = require("rxjs");
const index_1 = require("./managers/index");
const index_2 = require("./shared/index");
const __debugger = new index_2.Debugger('MongoClientExtension');
class MongoClientExt {
    static setConfig(config) {
        return {
            token: MongoClientExt,
            config,
        };
    }
    registerAdapters(mongoManager, adaptersToRegister) {
        __debugger.debug('registerAdapters', '');
        return rxjs_1.Observable
            .create(observer => {
            if (!adaptersToRegister || !adaptersToRegister.length) {
                observer.next();
                observer.complete();
            }
            else {
                const errors = adaptersToRegister
                    .map((_adapter) => {
                    try {
                        const res = mongoManager.registerAdapter(_adapter);
                        __debugger.debug('registerAdapters', `Correctly register ${JSON.stringify(res, null, 2)}`);
                        return null;
                    }
                    catch (err) {
                        return err;
                    }
                })
                    .filter(item => !!item);
                __debugger.debug('registerAdapters', `Correctly register ${JSON.stringify(errors.map(e => e.message), null, 2)}`);
                if (!errors.length) {
                    observer.next();
                    observer.complete();
                }
                else {
                    observer.error(errors.shift());
                }
            }
        });
    }
    loadAdapters(mongoManager, adaptersToLoad) {
        __debugger.debug('loadAdapters', `Params => ${JSON.stringify(adaptersToLoad, null, 2)}`);
        return rxjs_1.Observable
            .create(observer => {
            if (!adaptersToLoad || !adaptersToLoad.length) {
                observer.next();
                observer.complete();
            }
            else {
                rxjs_1.Observable
                    .forkJoin(adaptersToLoad
                    .map((adapterConfig) => mongoManager.loadAdapter(adapterConfig.name, adapterConfig.config)))
                    .subscribe(_ => {
                    __debugger.debug('loadAdapters', 'END of loading');
                    observer.next();
                    observer.complete();
                }, (err) => {
                    __debugger.debug('loadAdapters', `GOT ERROR => ${err.message}`);
                    observer.error(err);
                });
            }
        });
    }
    storeDocuments(module) {
        return rxjs_1.Observable
            .from([].concat(module.declarations))
            .filter(_ => !!core_1.extractMetadataByDecorator(_, 'MongoModel'))
            .flatMap(_ => core_1.DependencyInjection
            .instantiateComponent(_, module.di)
            .map(instance => ({ instance, token: _ })))
            .flatMap(instanceToken => rxjs_1.Observable
            .of(core_1.extractMetadataByDecorator(instanceToken.token, 'MongoModel'))
            .map(_ => ({
            metadata: _,
            adapter: this._mongoManager.getAdapter(_.adapter, _.options)
        }))
            .do(_ => _.adapter.getModelManager().add({
            token: instanceToken.token,
            value: _.adapter.registerValue(instanceToken.instance.schema, _.metadata.collection)
        })))
            .toArray()
            .flatMap(_ => rxjs_1.Observable
            .from([].concat(module.modules).filter(__ => !!__))
            .flatMap(__ => this.storeDocuments(__)));
    }
    /**
     * Initilization of the extension
     * Create the socket server
     *
     * @param  {CoreModule} module
     * @param  {SocketConfig} config
     * @returns Observable
     */
    onExtensionLoad(module, config) {
        return rxjs_1.Observable
            .create(observer => {
            this._mongoManager = new index_1.MongoManager(config.common);
            this
                .registerAdapters(this._mongoManager, config.register)
                .switchMap(_ => this.loadAdapters(this._mongoManager, config.load))
                .subscribe(_ => {
                observer.next({
                    instance: this,
                    token: MongoClientExt,
                    value: this._mongoManager
                });
                observer.complete();
            }, (err) => {
                observer.error(err);
            });
        });
    }
    onModuleInstantiated(module) {
        return this
            .storeDocuments(module)
            .ignoreElements()
            .defaultIfEmpty(null);
    }
}
exports.MongoClientExt = MongoClientExt;
//# sourceMappingURL=mongo.extension.js.map