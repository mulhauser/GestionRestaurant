"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@hapiness/core");
const mongo_extension_1 = require("../mongo.extension");
const managers_1 = require("../managers");
let MongoClientService = class MongoClientService {
    constructor(_mongoManager) {
        this._mongoManager = _mongoManager;
    }
    get() {
        return this._mongoManager;
    }
    getDao(connectionOptions) {
        connectionOptions = Object.assign({}, connectionOptions);
        const adapter = this._mongoManager
            .getAdapter(connectionOptions.adapter, connectionOptions.options);
        return adapter ? adapter.getLibrary() : undefined;
    }
    getStore(connectionOptions) {
        connectionOptions = Object.assign({}, connectionOptions);
        const adapter = this._mongoManager
            .getAdapter(connectionOptions.adapter, connectionOptions.options);
        return adapter ? adapter.getModelManager() : undefined;
    }
    getModel(connectionOptions, token) {
        connectionOptions = Object.assign({}, connectionOptions);
        const adapter = this._mongoManager
            .getAdapter(connectionOptions.adapter, connectionOptions.options);
        return adapter ? adapter.getModelManager().get(token) : undefined;
    }
};
MongoClientService = __decorate([
    core_1.Injectable(),
    __param(0, core_1.Inject(mongo_extension_1.MongoClientExt)),
    __metadata("design:paramtypes", [managers_1.MongoManager])
], MongoClientService);
exports.MongoClientService = MongoClientService;
//# sourceMappingURL=mongo-client.service.js.map