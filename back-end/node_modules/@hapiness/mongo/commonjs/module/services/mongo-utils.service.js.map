{"version":3,"file":"mongo-utils.service.js","sourceRoot":"","sources":["../../../../src/module/services/mongo-utils.service.ts"],"names":[],"mappings":";;AAAA,qCAAmC;AAEnC;IAEW,MAAM,CAAC,UAAU,CAAC,EAAU;QAC/B,IAAI,CAAC;YACD,MAAM,CAAC,IAAI,kBAAQ,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC;QAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,mBAAmB,CAAC,GAAQ;QACtC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAED,MAAM,cAAc,GAAQ,EAAE,CAAC;QAE/B,MAAM;aACD,IAAI,CAAC,GAAG,CAAC;aACT,OAAO,CAAC,OAAO,CAAC,EAAE;YACf,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACrD,MAAM;qBACD,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;qBAClB,OAAO,CACJ,QAAQ,CAAC,EAAE;oBACP,cAAc,CAAC,GAAG,OAAO,IAAI,QAAQ,EAAE,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACtE,CAAC,CACJ,CAAC;YACV,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,cAAc,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC,CAAC,CAAC;QAEP,MAAM,CAAC,cAAc,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,SAAc;QACrC,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,SAAS,CAAC,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;YACrE,OAAO,SAAS,CAAC,EAAE,CAAC;QACxB,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,qBAAqB,CAAC,MAAgB;QACzC,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnF,CAAC;CACJ;AApDD,gCAoDC","sourcesContent":["import { ObjectID } from 'mongodb';\n\nexport class MongoUtils {\n\n    public static toObjectId(id: string) {\n        try {\n            return new ObjectID(id);\n        } catch (err) {\n            return undefined;\n        }\n    }\n\n    public static prepareUpdateObject(dto: any): any {\n        if (!dto || !Object.keys(dto).length) {\n            return {};\n        }\n\n        const preparedObject: any = {};\n\n        Object\n            .keys(dto)\n            .forEach(rootKey => {\n                if (!!dto[rootKey] && typeof dto[rootKey] === 'object') {\n                    Object\n                        .keys(dto[rootKey])\n                        .forEach(\n                            childKey => {\n                                preparedObject[`${rootKey}.${childKey}`] = dto[rootKey][childKey];\n                            }\n                        );\n                } else {\n                    preparedObject[rootKey] = dto[rootKey];\n                }\n            });\n\n        return preparedObject;\n    }\n\n    static filterFindCondition(condition: any): any {\n        if (condition.id || condition._id) {\n            condition._id = MongoUtils.toObjectId(condition.id || condition._id);\n            delete condition.id;\n        }\n\n        return condition;\n    }\n\n    static fieldsStringFromArray(fields: string[]): string {\n        if (!fields || !fields.length) {\n            return '';\n        }\n\n        return fields.filter(f => !!f && f.trim().length).map(f => f.trim()).join(' ');\n    }\n}\n"]}