{"version":3,"file":"mongo-client.service.js","sourceRoot":"","sources":["../../../../src/module/services/mongo-client.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yCAA0D;AAC1D,wDAAoD;AACpD,0CAAyD;AAQzD,IAAa,kBAAkB,GAA/B;IACI,YACoC,aAA2B;QAA3B,kBAAa,GAAb,aAAa,CAAc;IAC3D,CAAC;IAEL,GAAG;QACC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,iBAAoC;QACvC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa;aAC7B,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IACtD,CAAC;IAED,QAAQ,CAAC,iBAAoC;QACzC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa;aAC7B,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3D,CAAC;IAED,QAAQ,CAAC,iBAAoC,EAAE,KAAgB;QAC3D,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa;aAC7B,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACtE,CAAC;CACJ,CAAA;AA7BY,kBAAkB;IAD9B,iBAAU,EAAE;IAGJ,WAAA,aAAM,CAAC,gCAAc,CAAC,CAAA;qCAAwB,uBAAY;GAFtD,kBAAkB,CA6B9B;AA7BY,gDAAkB","sourcesContent":["import { Injectable, Inject, Type } from '@hapiness/core';\nimport { MongoClientExt } from '../mongo.extension';\nimport { MongoManager, ModelManager } from '../managers';\n\nexport interface ConnectionOptions {\n    adapter: string;\n    options?: any;\n}\n\n@Injectable()\nexport class MongoClientService {\n    constructor(\n        @Inject(MongoClientExt) private _mongoManager: MongoManager\n    ) { }\n\n    get() {\n        return this._mongoManager;\n    }\n\n    getDao(connectionOptions: ConnectionOptions) {\n        connectionOptions = Object.assign({}, connectionOptions);\n        const adapter = this._mongoManager\n            .getAdapter(connectionOptions.adapter, connectionOptions.options);\n        return adapter ? adapter.getLibrary() : undefined;\n    }\n\n    getStore(connectionOptions: ConnectionOptions): ModelManager {\n        connectionOptions = Object.assign({}, connectionOptions);\n        const adapter = this._mongoManager\n            .getAdapter(connectionOptions.adapter, connectionOptions.options);\n        return adapter ? adapter.getModelManager() : undefined;\n    }\n\n    getModel(connectionOptions: ConnectionOptions, token: Type<any>): any {\n        connectionOptions = Object.assign({}, connectionOptions);\n        const adapter = this._mongoManager\n            .getAdapter(connectionOptions.adapter, connectionOptions.options);\n        return adapter ? adapter.getModelManager().get(token) : undefined;\n    }\n}\n"]}