{"version":3,"file":"mongo-manager.js","sourceRoot":"","sources":["../../../../src/module/managers/mongo-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    HapinessMongoAdapter,\n    HapinessMongoAdapterConstructorArgs,\n    MongooseAdapter,\n    MongooseGridFsAdapter\n} from '../adapters';\n\nimport { StringMap, Debugger } from '../shared';\nimport { Observable } from 'rxjs/Observable';\n\nconst __debugger = new Debugger('MongoManager');\n\nexport class MongoManager {\n\n    private _config: HapinessMongoAdapterConstructorArgs;\n    private _adapters: StringMap<typeof HapinessMongoAdapter>;\n    private _adaptersInstances: StringMap<HapinessMongoAdapter>;\n\n    constructor(config?: HapinessMongoAdapterConstructorArgs) {\n        this._config = this._fixConfig(config);\n        this._adaptersInstances = {};\n        this._adapters = {\n            [MongooseAdapter.getInterfaceName()]: MongooseAdapter,\n            [MongooseGridFsAdapter.getInterfaceName()]: MongooseGridFsAdapter\n        };\n    }\n\n    private _fixConfig(configValues?: HapinessMongoAdapterConstructorArgs): HapinessMongoAdapterConstructorArgs {\n        __debugger.debug('_fixConfig', '');\n        return <HapinessMongoAdapterConstructorArgs> Object.assign({}, configValues);\n    }\n\n    private _keyForAdapter(adapterName: string, options: HapinessMongoAdapterConstructorArgs): string {\n        __debugger.debug('_keyForAdapter', '');\n        const key = `${adapterName}_${options.host }`\n            .concat(\n                !!options.db ?\n                    `_${options.db}` :\n                    !!options.database ?\n                        `_${options.db}` : ''\n            )\n            .concat(`${options.instance || 0 }`);\n\n        return key;\n    }\n\n    public registerAdapter(adapterClass: typeof HapinessMongoAdapter): boolean {\n        __debugger.debug('registerAdapter', '');\n        const adapterName: string = adapterClass.getInterfaceName();\n\n        __debugger.debug('registerAdapter', `---->  ${adapterName}`);\n        if (!this._adapters[adapterName]) {\n            this._adapters[adapterName] = adapterClass;\n        } else {\n            throw new Error(`Provider ${adapterName} already exists.`);\n        }\n\n        return true;\n    }\n\n    public loadAdapter(adapterName: string, options?: any): Observable<HapinessMongoAdapter> {\n        __debugger.debug('loadAdapter', `Adapter name ---> ${adapterName}`);\n        if (!this._adapters[adapterName]) {\n            return Observable.throw(new Error(`Unknown adapter ${adapterName}, please register it before using it.`));\n        }\n\n        const _options: HapinessMongoAdapterConstructorArgs = <HapinessMongoAdapterConstructorArgs>\n            Object.assign({}, this._config, options);\n\n        const key = this._keyForAdapter(adapterName, _options);\n        if (!this._adaptersInstances[key]) {\n            this._adaptersInstances[key] = new (this._adapters[adapterName])(_options);\n        }\n\n        return this\n            ._adaptersInstances[key]\n            .whenReady()\n            .switchMap(_ => Observable\n                .create(observer => {\n                    observer.next(this._adaptersInstances[key]);\n                    observer.complete();\n                })\n            );\n    }\n\n    public getAdapter(adapterName: string, options?: any): HapinessMongoAdapter {\n        __debugger.debug('getAdapter', `Adapter name ---> ${adapterName}`);\n\n        const _options: HapinessMongoAdapterConstructorArgs = <HapinessMongoAdapterConstructorArgs>\n            Object.assign({}, this._config, options);\n\n        const key = this._keyForAdapter(adapterName, _options);\n\n        return this._adaptersInstances[key];\n    }\n}\n"]}