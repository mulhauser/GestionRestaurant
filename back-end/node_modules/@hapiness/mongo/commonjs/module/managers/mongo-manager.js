"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const adapters_1 = require("../adapters");
const shared_1 = require("../shared");
const Observable_1 = require("rxjs/Observable");
const __debugger = new shared_1.Debugger('MongoManager');
class MongoManager {
    constructor(config) {
        this._config = this._fixConfig(config);
        this._adaptersInstances = {};
        this._adapters = {
            [adapters_1.MongooseAdapter.getInterfaceName()]: adapters_1.MongooseAdapter,
            [adapters_1.MongooseGridFsAdapter.getInterfaceName()]: adapters_1.MongooseGridFsAdapter
        };
    }
    _fixConfig(configValues) {
        __debugger.debug('_fixConfig', '');
        return Object.assign({}, configValues);
    }
    _keyForAdapter(adapterName, options) {
        __debugger.debug('_keyForAdapter', '');
        const key = `${adapterName}_${options.host}`
            .concat(!!options.db ?
            `_${options.db}` :
            !!options.database ?
                `_${options.db}` : '')
            .concat(`${options.instance || 0}`);
        return key;
    }
    registerAdapter(adapterClass) {
        __debugger.debug('registerAdapter', '');
        const adapterName = adapterClass.getInterfaceName();
        __debugger.debug('registerAdapter', `---->  ${adapterName}`);
        if (!this._adapters[adapterName]) {
            this._adapters[adapterName] = adapterClass;
        }
        else {
            throw new Error(`Provider ${adapterName} already exists.`);
        }
        return true;
    }
    loadAdapter(adapterName, options) {
        __debugger.debug('loadAdapter', `Adapter name ---> ${adapterName}`);
        if (!this._adapters[adapterName]) {
            return Observable_1.Observable.throw(new Error(`Unknown adapter ${adapterName}, please register it before using it.`));
        }
        const _options = Object.assign({}, this._config, options);
        const key = this._keyForAdapter(adapterName, _options);
        if (!this._adaptersInstances[key]) {
            this._adaptersInstances[key] = new (this._adapters[adapterName])(_options);
        }
        return this
            ._adaptersInstances[key]
            .whenReady()
            .switchMap(_ => Observable_1.Observable
            .create(observer => {
            observer.next(this._adaptersInstances[key]);
            observer.complete();
        }));
    }
    getAdapter(adapterName, options) {
        __debugger.debug('getAdapter', `Adapter name ---> ${adapterName}`);
        const _options = Object.assign({}, this._config, options);
        const key = this._keyForAdapter(adapterName, _options);
        return this._adaptersInstances[key];
    }
}
exports.MongoManager = MongoManager;
//# sourceMappingURL=mongo-manager.js.map