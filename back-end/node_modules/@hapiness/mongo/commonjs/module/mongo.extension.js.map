{"version":3,"file":"mongo.extension.js","sourceRoot":"","sources":["../../../src/module/mongo.extension.ts"],"names":[],"mappings":"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","sourcesContent":["import { MongoModel, Model } from './mongo.decorators';\nimport {\n    CoreModule,\n    DependencyInjection,\n    Extension,\n    ExtensionWithConfig,\n    extractMetadataByDecorator,\n    OnExtensionLoad,\n    OnModuleInstantiated,\n} from '@hapiness/core';\n\nimport { Observable } from 'rxjs';\nimport { MongoManager } from './managers/index';\nimport { HapinessMongoAdapter, HapinessMongoConfig, HapinessLoadAdapterConfig } from './adapters/index';\n\nimport { Debugger } from './shared/index';\n\nconst __debugger = new Debugger('MongoClientExtension');\n\nexport class MongoClientExt implements OnExtensionLoad, OnModuleInstantiated {\n\n    private _mongoManager: MongoManager;\n\n    static setConfig(config: HapinessMongoConfig): ExtensionWithConfig {\n        return {\n            token: MongoClientExt,\n            config,\n        };\n    }\n\n    registerAdapters(mongoManager: MongoManager, adaptersToRegister: Array<typeof HapinessMongoAdapter>): Observable<void> {\n        __debugger.debug('registerAdapters', '');\n        return Observable\n            .create(\n                observer => {\n                    if (!adaptersToRegister || !adaptersToRegister.length) {\n                        observer.next();\n                        observer.complete();\n                    } else {\n                        const errors = adaptersToRegister\n                            .map((_adapter: typeof HapinessMongoAdapter) => {\n                                try {\n                                    const res = mongoManager.registerAdapter(_adapter);\n                                    __debugger.debug('registerAdapters', `Correctly register ${JSON.stringify(res, null, 2)}`);\n                                    return null;\n                                } catch (err) {\n                                    return err;\n                                }\n                            })\n                            .filter(item => !!item);\n\n                        __debugger.debug('registerAdapters', `Correctly register ${JSON.stringify(errors.map(e => e.message), null, 2)}`);\n                        if (!errors.length) {\n                            observer.next();\n                            observer.complete();\n                        } else {\n                            observer.error(errors.shift());\n                        }\n                    }\n                }\n            );\n    }\n\n    loadAdapters(mongoManager: MongoManager, adaptersToLoad: HapinessLoadAdapterConfig[]): Observable<void> {\n        __debugger.debug('loadAdapters', `Params => ${JSON.stringify(adaptersToLoad, null, 2)}`);\n        return Observable\n            .create(\n                observer => {\n                    if (!adaptersToLoad || !adaptersToLoad.length) {\n                        observer.next();\n                        observer.complete();\n                    } else {\n                        Observable\n                            .forkJoin(\n                                adaptersToLoad\n                                    .map(\n                                        (adapterConfig: HapinessLoadAdapterConfig) =>\n                                            mongoManager.loadAdapter(\n                                                adapterConfig.name,\n                                                adapterConfig.config\n                                            )\n                                    )\n                            )\n                            .subscribe(_ => {\n                                __debugger.debug('loadAdapters', 'END of loading');\n                                observer.next();\n                                observer.complete();\n                            }, (err) => {\n                                __debugger.debug('loadAdapters', `GOT ERROR => ${err.message}`);\n                                observer.error(err);\n                            });\n                    }\n                }\n            );\n    }\n\n\n    private storeDocuments(module: CoreModule): Observable<any> {\n        return Observable\n            .from([].concat(module.declarations))\n            .filter(_ => !!extractMetadataByDecorator(_, 'MongoModel'))\n            .flatMap(_ =>\n                DependencyInjection\n                .instantiateComponent<Model>(_, module.di)\n                .map(instance => ({ instance, token: _ }))\n            )\n            .flatMap(instanceToken =>\n                Observable\n                    .of(extractMetadataByDecorator<MongoModel>(instanceToken.token, 'MongoModel'))\n                    .map(_ => ({\n                        metadata: _,\n                        adapter: this._mongoManager.getAdapter(_.adapter, _.options)\n                    }))\n                    .do(_ => _.adapter.getModelManager().add({\n                        token: instanceToken.token,\n                        value: _.adapter.registerValue(instanceToken.instance.schema, _.metadata.collection)\n                    }))\n            )\n            .toArray()\n            .flatMap(_ =>\n                Observable\n                    .from([].concat(module.modules).filter(__ => !!__))\n                    .flatMap(__ => this.storeDocuments(__))\n            );\n    }\n\n    /**\n     * Initilization of the extension\n     * Create the socket server\n     *\n     * @param  {CoreModule} module\n     * @param  {SocketConfig} config\n     * @returns Observable\n     */\n    onExtensionLoad(module: CoreModule, config: HapinessMongoConfig): Observable<Extension> {\n        return Observable\n            .create(observer => {\n                this._mongoManager = new MongoManager(config.common);\n                this\n                    .registerAdapters(this._mongoManager, config.register)\n                    .switchMap(_ => this.loadAdapters(this._mongoManager, config.load))\n                    .subscribe(_ => {\n                        observer.next({\n                            instance: this,\n                            token: MongoClientExt,\n                            value: this._mongoManager\n                        });\n                        observer.complete();\n                    }, (err) => {\n                        observer.error(err);\n                    });\n            });\n    }\n\n    onModuleInstantiated(module: CoreModule): Observable<any> {\n        return this\n            .storeDocuments(module)\n            .ignoreElements()\n            .defaultIfEmpty(null);\n    }\n}\n"]}