{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/extensions/http-server/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { CoreModule, CoreProvide } from '../../core/interfaces';\nimport { Type } from '../../core/decorators';\nimport { Request, ReplyWithContinue, ReplyNoContinue, ServerOptions, RouteAdditionalConfigurationOptions } from 'hapi';\nimport { Observable } from 'rxjs';\n\nexport interface HapiConfig {\n    host: string;\n    port: number;\n    options?: ServerOptions\n}\n\nexport interface RouteConfig extends RouteAdditionalConfigurationOptions {}\n\n/**\n * CoreRoute Type\n * Represents an Http Route\n */\nexport interface CoreRoute {\n    token: Type<any> | any;\n    path: string;\n    method: string | string[];\n    module: CoreModule;\n    providers?: CoreProvide[];\n    config?: RouteConfig;\n}\n\nexport interface HapinessHTTPHandlerResponse {\n    response: any;\n    statusCode?: number;\n    headers?: { [key: string]: string }\n}\n\n/**\n * Route Handler\n * called on Http Get request\n *\n * @returns void | Observable\n */\nexport interface OnGet {\n    onGet(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * Route Handler\n * called on Http Post request\n *\n * @returns void | Observable\n */\nexport interface OnPost {\n    onPost(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * Route Handler\n * called on Http Put request\n *\n * @param  {Error} error\n * @returns void | Observable\n */\nexport interface OnPut {\n    onPut(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * Route Handler\n * called on Http Patch request\n *\n * @param  {string} module\n * @returns void | Observable\n */\nexport interface OnPatch {\n    onPatch(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * Route Handler\n * called on Http Options request\n *\n * @param  {string} module\n * @returns void | Observable\n */\nexport interface OnOptions {\n    onOptions(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * Route Handler\n * called on Http Delete request\n *\n * @param  {string} module\n * @returns void | Observable\n */\nexport interface OnDelete {\n    onDelete(request: Request, reply?: ReplyNoContinue): void | Observable<any | HapinessHTTPHandlerResponse>;\n}\n\n/**\n * OnPreAuth Lifecycle hook\n *\n * @param  {Request} request\n * @param  {Reply} reply\n * @returns void | Observable\n */\nexport interface OnPreAuth {\n    onPreAuth(request: Request, reply?: ReplyWithContinue ): void | Observable<void>;\n}\n\n/**\n * OnPostAuth Lifecycle hook\n *\n * @param  {Request} request\n * @param  {Reply} reply\n * @returns void | Observable\n */\nexport interface OnPostAuth {\n    onPostAuth(request: Request, reply?: ReplyWithContinue ): void | Observable<void>;\n}\n\n/**\n * OnPreHandler Lifecycle hook\n *\n * @param  {Request} request\n * @param  {Reply} reply\n * @returns void | Observable\n */\nexport interface OnPreHandler {\n    onPreHandler(request: Request, reply?: ReplyWithContinue ): void | Observable<void>;\n}\n\n/**\n * OnPostHandler Lifecycle hook\n *\n * @param  {Request} request\n * @param  {Reply} reply\n * @returns void | Observable\n */\nexport interface OnPostHandler {\n    onPostHandler(request: Request, reply?: ReplyWithContinue ): void | Observable<void>;\n}\n\n/**\n * OnPreResponse Lifecycle hook\n *\n * @param  {Request} request\n * @param  {Reply} reply\n * @returns void | Observable\n */\nexport interface OnPreResponse {\n    onPreResponse(request: Request, reply?: ReplyWithContinue ): void | Observable<void>;\n}\n\n/**\n * Request lifecycle component Hook\n *\n * @returns void | Observable\n */\nexport interface OnEvent { onEvent(request: Request, reply: ReplyWithContinue): void | Observable<void>; }\n"]}