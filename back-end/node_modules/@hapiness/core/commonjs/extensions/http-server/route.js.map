{"version":3,"file":"route.js","sourceRoot":"","sources":["../../../../src/extensions/http-server/route.ts"],"names":[],"mappings":"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","sourcesContent":["import { CoreModule } from '../../core/interfaces';\nimport { CoreRoute } from './interfaces';\nimport { Observable } from 'rxjs';\nimport { Type } from '../../core/decorators';\nimport { Route } from './decorators';\nimport { extractMetadataByDecorator } from '../../core/metadata';\nimport { DependencyInjection } from '../../core/di';\nimport { Request } from 'hapi';\n\ninterface InternalType {\n    route: Route;\n    token: Type<any>;\n}\n\nexport class HttpRequestInfo {}\n\nexport class RouteBuilder {\n\n    /**\n     * Helper to extract metadata\n     * @property {string} decoratorName\n     */\n    private static decoratorName = 'Route';\n\n    /**\n     * Entrypoint to build a CoreRoute\n     * Get the metadata and build the\n     * route instance\n     *\n     * @param  {CoreModule} module\n     * @returns CoreRoute\n     */\n    public static buildRoutes(module: CoreModule): Observable<CoreRoute> {\n        return Observable\n            .of(module)\n            .filter(_ => !!_)\n            .flatMap(_ => this.metadataFromDeclarations(_.declarations))\n            .flatMap(_ => this.coreRouteFromMetadata(_.route, _.token, module));\n    }\n\n    /**\n     * Instantiate a new Route\n     * with its own DI/request\n     *\n     * @param  {CoreRoute} route\n     * @param  {Request} request\n     * @returns Observable\n     */\n    public static instantiateRouteAndDI<T>(route: CoreRoute, request: Request): Observable<T> {\n        return Observable\n            .of(request)\n            .map(_ => ({\n                query: Object.assign({}, request.query),\n                params: Object.assign({}, request.params),\n                headers: Object.assign({}, request.headers),\n                payload: Object.assign({}, request.payload),\n                id: request.id\n            }))\n            .map(_ => ({ provide: HttpRequestInfo, useValue: _ }))\n            .map(_ => [].concat(route.providers).concat(_))\n            .flatMap(_ => DependencyInjection.createAndResolve(_, route.module.di))\n            .flatMap(_ => DependencyInjection.instantiateComponent(route.token, _));\n    }\n\n    /**\n     * Transform metadata to instance CoreRoute\n     *\n     * @param  {Route} data\n     * @returns CoreRoute\n     */\n    private static coreRouteFromMetadata(data: Route, token: Type<any>, module: CoreModule): Observable<CoreRoute> {\n        return Observable\n            .of(data)\n            .flatMap(_ =>\n                Observable\n                    .from([].concat(_.method))\n                    .map(__ => <string>__.toLowerCase())\n                    .toArray()\n                    .map(__ => ({ data: _, methods: __ }))\n            )\n            .map(_ => (<CoreRoute>{\n                token,\n                module,\n                config: _.data.config,\n                path: _.data.path,\n                method: _.methods,\n                providers: []\n                    .concat(_.data.providers)\n                    .filter(p => !!p)\n                    .map(p => p.provide ? p : { provide: p, useClass: p })\n            }));\n    }\n\n    /**\n     * Extract metadata filtered by route\n     * from the declarations provided\n     *\n     * @param  {Type<any>} declarations\n     * @returns Route\n     */\n    private static metadataFromDeclarations(declarations: Type<any>[]): Observable<InternalType> {\n        return Observable\n            .from([].concat(declarations))\n            .filter(_ => !!_ && !!extractMetadataByDecorator(_, this.decoratorName))\n            .map(_ => ({ token: _, route: extractMetadataByDecorator<Route>(_, this.decoratorName) }))\n    }\n}\n"]}