{"version":3,"file":"rooms.js","sourceRoot":"","sources":["../../../../src/extensions/socket-server/rooms.ts"],"names":[],"mappings":";;AAMA;IAAA;QACY,UAAK,GAAU,EAAE,CAAC;IA4E9B,CAAC;IA1EG;;;;OAIG;IACH,QAAQ;QACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAY;QACf,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAC,IAAY,EAAE,MAAc;QAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,IAAY,EAAE,MAAc;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC;QACX,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,CAAC,IAAY,EAAE,KAAa,EAAE,IAAS;QACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;CACJ;AA7ED,wCA6EC","sourcesContent":["import { Socket } from './socket';\n\nexport interface Rooms {\n    [key: string]: Array<Socket>;\n}\n\nexport class WebSocketRooms {\n    private rooms: Rooms = {};\n\n    /**\n     * Return rooms object\n     *\n     * @returns {Rooms} rooms\n     */\n    getRooms(): Rooms {\n        return this.rooms;\n    }\n\n    /**\n     * Test if a room already exists\n     *\n     * @param {string} room\n     * @return boolean\n     */\n    exists(room: string): boolean {\n        return !!this.rooms[room];\n    }\n\n    /**\n     * Join a room with a socket\n     *\n     * @param {string} room\n     * @param {Socket} socket\n     * @returns Socket\n     */\n    join(room: string, socket: Socket): Socket {\n        if (!this.exists(room)) {\n            this.rooms[room] = [];\n        }\n\n        this.rooms[room].push(socket);\n        return socket;\n    }\n\n    /**\n     * Leave room with a socket\n     *\n     * @param {string} room\n     * @param {Socket} socket\n     * @returns Socket\n     */\n    leave(room: string, socket: Socket): Socket {\n        if (!this.exists(room)) {\n            return;\n        }\n\n        const socketIndex = this.rooms[room].indexOf(socket);\n        if (socketIndex > -1) {\n            this.rooms[room].splice(socketIndex, 1);\n        }\n\n        return socket;\n    }\n\n    /**\n     * Emit a message to one room\n     *\n     * @param {string} room\n     * @param {string} event\n     * @param {any} data\n     * @returns WebSocketRooms\n     */\n    emit(room: string, event: string, data: any): WebSocketRooms {\n        if (!this.exists(room)) {\n            return;\n        }\n\n        this.rooms[room].forEach(socket => {\n            socket.emit(event, data);\n        });\n\n        return this;\n    }\n}\n"]}