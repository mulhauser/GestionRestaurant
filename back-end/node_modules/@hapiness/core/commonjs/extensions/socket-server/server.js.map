{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../src/extensions/socket-server/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs/Rx';\nimport { server, request } from 'websocket';\nimport { Socket } from './socket';\nimport { SocketConfig } from './extension';\nimport * as http from 'http';\nimport * as https from 'https';\nimport { WebSocketRooms } from './rooms';\n\nexport class WebSocketServer {\n    private server: server;\n    private connections$ = new Subject<Socket>();\n    private sockets: Socket[];\n    private httpServer: http.Server | https.Server;\n    private rooms: WebSocketRooms;\n    private secure: ((request: request) => Observable<boolean>) = () => Observable.of(true);\n\n    constructor(config: SocketConfig) {\n        /* istanbul ignore next */\n        const httpHandler = (_request, _response) => {\n            _response.writeHead(404);\n            _response.end();\n        };\n        if (!!config.tls) {\n            this.httpServer = https.createServer(config.tls, httpHandler);\n        } else {\n            this.httpServer = http.createServer(httpHandler);\n        }\n        this.httpServer.listen(config.port);\n        delete config.port;\n        const _config = Object.assign({ httpServer: <any>this.httpServer }, config);\n        this.server = new server(_config);\n        this.sockets = [];\n        this.server.on('request', _request => {\n            this\n                .secure(_request)\n                .subscribe(\n                    _ => !!_ ?\n                        this.onRequestHandler(_request) :\n                        _request.reject(403, 'Forbidden')\n                );\n        });\n        this.rooms = new WebSocketRooms();\n    }\n\n    /**\n     * Resquest handler\n     * Accept the request\n     *\n     * @param  {request} _request\n     */\n    private onRequestHandler(_request: request): void {\n        const connection = _request.accept(null, _request.origin);\n        const socket = new Socket(_request, connection, this.rooms);\n        const index = this.sockets.push(socket) - 1;\n        connection.on('close', conn => {\n            this.sockets.splice(index, 1);\n        });\n        this.connections$.next(socket);\n    }\n\n    /**\n     * Configure a secure callback\n     * to accept/reject requests\n     *\n     * @param  {(request:request)=>Observable<boolean>} secure\n     * @returns Subject\n     */\n    public configure(secure: (request: request) => Observable<boolean>): Subject<Socket> {\n        this.secure = (!!secure ? secure : this.secure);\n        return this.connections$;\n    }\n\n    /**\n     * Get connections Subject\n     *\n     * @returns Subject\n     */\n    public connections(): Subject<Socket> {\n        return this.connections$;\n    }\n\n    /**\n     * Get active sockets\n     *\n     * @returns Socket\n     */\n    public getSockets(): Socket[] {\n        return this.sockets;\n    }\n\n    /**\n     * Broadcast data into active sockets\n     *\n     * @param  {string} event\n     * @param  {any} data\n     */\n    public broadcast(event: string, data: any) {\n        this.server.broadcastUTF(\n            JSON.stringify({\n                event,\n                data\n            })\n        );\n    }\n\n    /**\n     * Send a message to all sockets present in a room\n     *\n     * @param {string} room\n     * @param {string} event\n     * @param {any} data\n     * @returns WebSocketServer\n     */\n    public to(room: string, event: string, data: any) {\n        this.rooms.emit(room, event, data);\n        return this;\n    }\n\n    public getServer() {\n        return this.server;\n    }\n\n    public getHttpServer() {\n        return this.httpServer;\n    }\n}\n"]}