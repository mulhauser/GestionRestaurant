"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Rx_1 = require("rxjs/Rx");
const websocket_1 = require("websocket");
const socket_1 = require("./socket");
const http = require("http");
const https = require("https");
const rooms_1 = require("./rooms");
class WebSocketServer {
    constructor(config) {
        this.connections$ = new Rx_1.Subject();
        this.secure = () => Rx_1.Observable.of(true);
        /* istanbul ignore next */
        const httpHandler = (_request, _response) => {
            _response.writeHead(404);
            _response.end();
        };
        if (!!config.tls) {
            this.httpServer = https.createServer(config.tls, httpHandler);
        }
        else {
            this.httpServer = http.createServer(httpHandler);
        }
        this.httpServer.listen(config.port);
        delete config.port;
        const _config = Object.assign({ httpServer: this.httpServer }, config);
        this.server = new websocket_1.server(_config);
        this.sockets = [];
        this.server.on('request', _request => {
            this
                .secure(_request)
                .subscribe(_ => !!_ ?
                this.onRequestHandler(_request) :
                _request.reject(403, 'Forbidden'));
        });
        this.rooms = new rooms_1.WebSocketRooms();
    }
    /**
     * Resquest handler
     * Accept the request
     *
     * @param  {request} _request
     */
    onRequestHandler(_request) {
        const connection = _request.accept(null, _request.origin);
        const socket = new socket_1.Socket(_request, connection, this.rooms);
        const index = this.sockets.push(socket) - 1;
        connection.on('close', conn => {
            this.sockets.splice(index, 1);
        });
        this.connections$.next(socket);
    }
    /**
     * Configure a secure callback
     * to accept/reject requests
     *
     * @param  {(request:request)=>Observable<boolean>} secure
     * @returns Subject
     */
    configure(secure) {
        this.secure = (!!secure ? secure : this.secure);
        return this.connections$;
    }
    /**
     * Get connections Subject
     *
     * @returns Subject
     */
    connections() {
        return this.connections$;
    }
    /**
     * Get active sockets
     *
     * @returns Socket
     */
    getSockets() {
        return this.sockets;
    }
    /**
     * Broadcast data into active sockets
     *
     * @param  {string} event
     * @param  {any} data
     */
    broadcast(event, data) {
        this.server.broadcastUTF(JSON.stringify({
            event,
            data
        }));
    }
    /**
     * Send a message to all sockets present in a room
     *
     * @param {string} room
     * @param {string} event
     * @param {any} data
     * @returns WebSocketServer
     */
    to(room, event, data) {
        this.rooms.emit(room, event, data);
        return this;
    }
    getServer() {
        return this.server;
    }
    getHttpServer() {
        return this.httpServer;
    }
}
exports.WebSocketServer = WebSocketServer;
//# sourceMappingURL=server.js.map