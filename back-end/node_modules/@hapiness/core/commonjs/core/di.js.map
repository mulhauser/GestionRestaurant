{"version":3,"file":"di.js","sourceRoot":"","sources":["../../../src/core/di.ts"],"names":[],"mappings":";;AAAA,+CAA+G;AAE/G,qCAA0C;AAC1C,+BAAkC;AAElC;IAII;;;;;;;OAOG;IACH,MAAM,CAAC,gBAAgB,CAAC,SAAsC,EAAE,MAA2B;QACvF,MAAM,CAAC,iBAAU;aACZ,EAAE,CAAC,MAAM,CAAC;aACV,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,qBAAqB,CAAM,SAAS,CAAC,CAAC,CAAC;YAC9C,iCAAkB,CAAC,gBAAgB,CAAM,SAAS,CAAC,CACtD;aACA,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAClF,CAAC;IAED;;;;;;;;;OASG;IACH,MAAM,CAAC,oBAAoB,CAAI,SAAkB,EAAE,EAAsB;QACrE,MAAM,CAAC,iBAAU;aACZ,IAAI,CAAC,iCAAkB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aAC7C,MAAM,CAAC,CAAC,CAAC,EAAE,CAA6B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,EAAO,EAAE,CAAC;aACpF,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAA4B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC;aACrF,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;aAC9B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,SAAS,CAAC,IAAI,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;aAC7E,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACzD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC;;AAvCc,0BAAM,GAAG,IAAI,uBAAc,CAAC,IAAI,CAAC,CAAC;AAFrD,kDA2CC","sourcesContent":["import { Type, ReflectiveInjector, ResolvedReflectiveProvider, ResolvedReflectiveFactory } from 'injection-js';\nimport { CoreProvide } from './interfaces';\nimport { InternalLogger } from './logger';\nimport { Observable } from 'rxjs';\n\nexport class DependencyInjection {\n\n    private static logger = new InternalLogger('di');\n\n    /**\n     * Create a new DI and\n     * can inherits from a parent DI\n     *\n     * @param  {Type<T>[]} providers\n     * @param  {ReflectiveInjector} parent?\n     * @returns Observable<ReflectiveInjector>\n     */\n    static createAndResolve(providers: Type<any>[] | CoreProvide[], parent?: ReflectiveInjector): Observable<ReflectiveInjector> {\n        return Observable\n            .of(parent)\n            .map(_ => !!_ ?\n                parent.resolveAndCreateChild(<any>providers) :\n                ReflectiveInjector.resolveAndCreate(<any>providers)\n            )\n            .do(_ => this.logger.debug(`DI created, providers: ${providers.length}`));\n    }\n\n    /**\n     * Instantiate a component\n     * resolving its dependencies\n     * without inject the component\n     * into the DI\n     *\n     * @param  {Type<T>} component\n     * @param  {ReflectiveInjector} di\n     * @returns T\n     */\n    static instantiateComponent<T>(component: Type<T>, di: ReflectiveInjector): Observable<T> {\n        return Observable\n            .from(ReflectiveInjector.resolve([component]))\n            .reduce((a, x: ResolvedReflectiveProvider) => a.concat(x.resolvedFactories), <any>[])\n            .map(_ => _.reduce((a, r: ResolvedReflectiveFactory) => a.concat(r.dependencies), []))\n            .map(_ => _.filter(__ => !!__))\n            .do(_ => this.logger.debug(`Component '${component.name}' deps: ${_.length}`))\n            .map(_ => _.map(d => di['_getByReflectiveDependency'](d)))\n            .map(_ => Reflect.construct(component, _));\n    }\n\n}\n"]}