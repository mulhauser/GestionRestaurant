{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../../src/core/interfaces/module.ts"],"names":[],"mappings":";;AAkBA;;;GAGG;AACH;CAYC;AAZD,gCAYC","sourcesContent":["import { Type } from '../decorators';\nimport { ReflectiveInjector } from 'injection-js';\nimport { Observable } from 'rxjs';\nimport { ModuleLevel } from '../enums';\n\n/**\n * CoreProvide Type\n * Used by CoreModule Type\n */\nexport interface CoreProvide {\n    provide: any;\n    useClass?: any;\n    useValue?: any;\n    useExisting?: any;\n    useFactory?: any;\n    deps?: any[];\n}\n\n/**\n * CoreModule Type\n * Represents a Module\n */\nexport class CoreModule {\n    token: Type<any> | any;\n    name: string;\n    version: string;\n    instance?: any;\n    level: ModuleLevel;\n    di?: ReflectiveInjector;\n    providers?: CoreProvide[];\n    modules?: CoreModule[];\n    parent?: CoreModule;\n    exports?: Type<any>[] | any[];\n    declarations?: Type<any>[] | any[];\n}\n\n/**\n * CoreModuleWithProviders Type\n * Used to pass data while module importation\n */\nexport interface CoreModuleWithProviders {\n    module: Type<any>;\n    providers: CoreProvide[];\n}\n\n/**\n * Module Lifecycle Hook\n * called once the module has been\n * registered into the server\n *\n * @returns void | Observable\n */\nexport interface OnRegister { onRegister(): void | Observable<any>; }\n\n/**\n * Module Lifecycle Hook\n * called once the server has started\n * only for the MainModule\n *\n * @returns void | Observable\n */\nexport interface OnStart { onStart(): void | Observable<any>; }\n\n/**\n * Module Lifecycle Hook\n * called when an error\n * occured in components\n *\n * @returns void | Observable\n */\nexport interface OnError { onError(error: Error, data?: any): void | Observable<any>; }\n\n"]}