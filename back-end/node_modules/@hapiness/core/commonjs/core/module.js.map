{"version":3,"file":"module.js","sourceRoot":"","sources":["../../../src/core/module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { InternalLogger } from './logger';\nimport { extractMetadataByDecorator } from './metadata';\nimport { HapinessModule, Type, InjectionToken } from './decorators';\nimport { CoreModule, CoreProvide, CoreModuleWithProviders } from './interfaces';\nimport { DependencyInjection } from './di';\nimport { ModuleLevel } from './enums';\n\nexport class ModuleManager {\n\n    private static decoratorName = 'HapinessModule';\n\n    private static logger = new InternalLogger('module');\n\n    /**\n     * Resolve into a tree of CoreModule\n     *\n     * @param  {any} module\n     * @returns Observable\n     */\n    static resolve(module: any): Observable<CoreModule> {\n        this.logger.debug(`Resolving module '${module.name}'`);\n        return this.resolution(module);\n    }\n\n    static instantiate(module: CoreModule, providers?: CoreProvide[]): Observable<CoreModule> {\n        this.logger.debug(`Instantiation of module '${module.name}'`);\n        return this.instantiation(module, providers);\n    }\n\n    /**\n     * Get all the tree modules\n     *\n     * @param  {CoreModule} module\n     * @returns CoreModule\n     */\n    static getModules(module: CoreModule): CoreModule[] {\n        const lookup = (_module: CoreModule) => {\n            return []\n                .concat(_module)\n                .concat([]\n                    .concat(_module.modules)\n                    .filter(_ => !!_)\n                    .map(m => lookup(m))\n                    .reduce((a, c) => a.concat(c), [])\n                );\n        };\n        return lookup(module);\n    }\n\n    /**\n     * Helper to convert provider\n     * to a CoreProvide type\n     *\n     * @param  {any} provider\n     * @returns CoreProvide\n     */\n    static toCoreProvider(provider: any): CoreProvide {\n        return <CoreProvide>(!!provider.provide ?\n            provider :\n            { provide: provider, useClass: provider }\n        );\n    }\n\n    /**\n     * ===========================================================================\n     *\n     *  MODULE RESOLUTION\n     *\n     * ===========================================================================\n     */\n\n    /**\n     * Process module to CoreModule type\n     * from metadata and the children\n     *\n     * @param  {any} module\n     * @param  {CoreModule} parent?\n     * @returns Observable\n     */\n    private static resolution(module: any, parent?: CoreModule): Observable<CoreModule> {\n        return Observable\n            .of(module)\n            .map(_ => this.toCoreModuleWithProviders(_))\n            .flatMap(cmwp =>\n                this\n                    .extractMetadata(cmwp.module)\n                    .map(_ => ({ metadata: _, moduleWithProviders: cmwp }))\n            )\n            .flatMap(mcmwp =>\n                this\n                    .metadataToCoreModule(mcmwp.metadata, mcmwp.moduleWithProviders, parent)\n                    .map(_ => this.coreModuleParentConfigProviders(_))\n                    .map(_ => Object.assign({ module: _ }, mcmwp))\n            )\n            .flatMap(data =>\n                Observable\n                    .from(data.metadata.imports || [])\n                    .flatMap(_ => this.resolution(_, data.module))\n                    .toArray()\n                    .do(_ => this.logger.debug(`'${data.module.name}' got ${_.length} children`))\n                    .map(_ => <CoreModule>Object.assign({ modules: _ }, data.module))\n            )\n    }\n\n    /**\n     * FIX for exported providers\n     * that need internal config\n     *\n     * @todo find a better solution\n     * @param  {CoreModule} module\n     * @returns CoreModule\n     */\n    private static coreModuleParentConfigProviders(module: CoreModule): CoreModule {\n        module.providers = []\n            .concat(module.providers)\n            .concat((module.parent && module.parent.providers) ?\n                module.parent.providers.filter(_ => (_.provide instanceof InjectionToken)) :\n                []\n            )\n            .filter(_ => !!_);\n        return module;\n    }\n\n    /**\n     * Convert metadata to CoreModule type\n     *\n     * @param  {HapinessModule} metadata\n     * @param  {CoreModuleWithProviders} moduleWithProviders\n     * @param  {CoreModule} parent?\n     * @returns Observable\n     */\n    private static metadataToCoreModule(\n            metadata: HapinessModule,\n            moduleWithProviders: CoreModuleWithProviders,\n            parent?: CoreModule): Observable<CoreModule> {\n\n        return Observable\n            .of({\n                parent,\n                token: moduleWithProviders.module,\n                name: moduleWithProviders.module.name,\n                version: metadata.version,\n                exports: metadata.exports || [],\n                declarations: metadata.declarations || [],\n                providers: (metadata.providers || [])\n                    .concat(moduleWithProviders.providers)\n                    .map(_ => this.toCoreProvider(_)),\n                level: !!parent ?\n                    parent.level === ModuleLevel.ROOT ?\n                    ModuleLevel.PRIMARY :\n                    ModuleLevel.SECONDARY :\n                    ModuleLevel.ROOT\n            })\n            .do(_ => this.logger.debug(`Build CoreModule for '${_.name}'`));\n    }\n\n    /**\n     * Get HapinessModule metadata type\n     * if does not exist, throw an error\n     *\n     * @param  {Type<any>} module\n     * @returns Observable\n     */\n    private static extractMetadata(module: Type<any>): Observable<HapinessModule> {\n        return Observable\n            .of(extractMetadataByDecorator<HapinessModule>(module, this.decoratorName))\n            .flatMap(_ => !!_ ?\n                Observable.of(_) :\n                Observable.throw(new Error(`Module '${module ? module.name : null}' resolution failed: No metadata`))\n            )\n    }\n\n    /**\n     * Make sure to convert module into\n     * a CoreModuleWithProviders type\n     *\n     * @param  {CoreModuleWithProviders|Type<any>} module\n     * @returns CoreModuleWithProviders\n     */\n    private static toCoreModuleWithProviders(module: CoreModuleWithProviders | Type<any>): CoreModuleWithProviders {\n        return <CoreModuleWithProviders>((module && module['module']) ?\n            module :\n            {\n                module,\n                providers: []\n            });\n    }\n\n    /**\n     * ===========================================================================\n     *\n     *  MODULE INSTANTIATION\n     *\n     * ===========================================================================\n     */\n\n    /**\n     * Create the module's DI\n     * and instantiate the module\n     *\n     * @param  {CoreModule} module\n     * @param  {CoreProvide[]} providers?\n     * @param  {CoreModule} parent?\n     * @returns Observable\n     */\n    private static instantiation(module: CoreModule, providers?: CoreProvide[], parent?: CoreModule): Observable<CoreModule> {\n        return Observable\n            .of(module)\n            .flatMap(_ =>\n                Observable\n                    .from(_.modules)\n                    .flatMap(child => this.instantiation(child, providers, parent))\n                    .toArray()\n                    .map(children => <CoreModule>Object.assign({}, _, { modules: children }))\n            )\n            .flatMap(_ =>\n                DependencyInjection\n                    .createAndResolve(this.collectProviders(_, providers))\n                    .map(di => <CoreModule>Object.assign({ di }, _))\n            )\n            .flatMap(_ =>\n                DependencyInjection\n                    .instantiateComponent(_.token, _.di)\n                    .map(instance => <CoreModule>Object.assign({ instance }, _))\n            )\n            .flatMap(_ => this.instantiateLibs(_));\n    }\n\n    /**\n     * Instantiate and return array of libs\n     *\n     * @param  {CoreModule} module\n     * @returns Type\n     */\n    private static instantiateLibs(module: CoreModule): Observable<CoreModule> {\n        return Observable\n            .from(module.declarations)\n            .filter(_ => !!_ && !!extractMetadataByDecorator(_, 'Lib'))\n            .flatMap(_ => DependencyInjection.instantiateComponent(_, module.di))\n            .toArray()\n            .map(_ => module);\n    }\n\n    /**\n     * Collect all providers to\n     * inject into the DI\n     *\n     * @param  {HapinessModule} module\n     */\n    private static collectProviders(module: CoreModule, providers?: CoreProvide[]): CoreProvide[] {\n        this.logger.debug(`Collect providers for '${module.name}'`);\n        return []\n            .concat(module.providers)\n            .concat(providers)\n            .filter(_ => !!_)\n            .concat(this.extractExportedProviders(module));\n    }\n\n    /**\n     * Extract exported children providers\n     *\n     * @param  {CoreModule} module\n     * @returns CoreProvide[]\n     */\n    private static extractExportedProviders(module: CoreModule): CoreProvide[] {\n        this.logger.debug(`Extract exported children providers for '${module.name}'`);\n        return []\n            .concat(module.modules)\n            .filter(_ => (!!_.exports && _.exports.length > 0))\n            .map(_ => []\n                .concat(_.exports)\n                .concat(\n                    _.providers\n                        .filter(__ => (__.provide instanceof InjectionToken)))\n                )\n            .reduce((a, c) => a.concat(c), [])\n            .filter(_ => !!_)\n            .map(_ => this.toCoreProvider(_));\n    }\n}\n"]}