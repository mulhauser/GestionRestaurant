{"version":3,"file":"hapiness.js","sourceRoot":"","sources":["../../../src/core/hapiness.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\nimport { CoreModule, Extension, ExtensionWithConfig } from './interfaces';\nimport { InternalLogger } from './logger';\nimport { Type } from './decorators';\nimport { ExtentionHooksEnum, ModuleEnum, ModuleLevel } from './enums';\nimport { ModuleManager } from './module';\nimport { HookManager } from './hook';\n\nexport class Hapiness {\n\n    private static module: CoreModule;\n    private static extensions: Extension[];\n    private static logger = new InternalLogger('bootstrap');\n\n    /**\n     * Entrypoint to bootstrap a module\n     * will load the extentions and trigger\n     * module's hooks\n     *\n     * @param  {Type<any>} module\n     * @param  {Array<Type<any>|ExtensionWithConfig>} extensions?\n     * @returns Promise\n     */\n    public static bootstrap(module: Type<any>, extensions?: Array<Type<any> | ExtensionWithConfig>): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this\n                .checkArg(module)\n                .flatMap(_ => ModuleManager.resolve(_))\n                .flatMap(_ => this.loadExtensions(extensions, _))\n                .ignoreElements()\n                .subscribe(\n                    null,\n                    _ => reject(_),\n                    () => resolve()\n                )\n        });\n    }\n\n    /**\n     * Load extensions\n     *\n     * @param  {Array<Type<any>|ExtensionWithConfig>} extensions\n     * @param  {CoreModule} moduleResolved\n     * @returns Observable\n     */\n    private static loadExtensions(extensions:  Array<Type<any> | ExtensionWithConfig>, moduleResolved: CoreModule): Observable<void> {\n        return Observable\n            .from([].concat(extensions).filter(_ => !!_))\n            .map(_ => this.toExtensionWithConfig(_))\n            .flatMap(_ => this.loadExtention(_, moduleResolved))\n            .toArray()\n            .do(_ => this.extensions = _)\n            .flatMap(_ => this.instantiateModule(_, moduleResolved));\n    }\n\n    /**\n     * Instantiate module\n     *\n     * @param  {Extension[]} extensionsLoaded\n     * @param  {CoreModule} moduleResolved\n     * @returns Observable\n     */\n    private static instantiateModule(extensionsLoaded: Extension[], moduleResolved: CoreModule): Observable<void> {\n        return Observable\n            .from(extensionsLoaded)\n            .map(_ => ({ provide: _.token, useValue: _.value }))\n            .toArray()\n            .flatMap(_ => ModuleManager.instantiate(moduleResolved, _))\n            .flatMap(_ => this.callRegister(_))\n            .flatMap(moduleInstantiated =>\n                Observable\n                    .from(extensionsLoaded)\n                    .flatMap(_ => this.moduleInstantiated(_, moduleInstantiated))\n                    .toArray()\n                    .map(_ => moduleInstantiated)\n            )\n            .do(_ => this.module = _)\n            .flatMap(_ => this.callStart(_));\n    }\n\n    /**\n     * Call Register Hooks\n     *\n     * @param  {CoreModule} moduleInstantiated\n     * @returns Observable\n     */\n    private static callRegister(moduleInstantiated: CoreModule): Observable<CoreModule> {\n        return Observable\n            .from(ModuleManager.getModules(moduleInstantiated))\n            .filter(_ => _.level !== ModuleLevel.ROOT)\n            .filter(_ => HookManager\n                .hasLifecycleHook(ModuleEnum.OnRegister.toString(), _.token)\n            )\n            .flatMap(_ => HookManager\n                .triggerHook(ModuleEnum.OnRegister.toString(), _.token, _.instance)\n            )\n            .toArray()\n            .map(_ => moduleInstantiated)\n    }\n\n    /**\n     * Call Start Hooks\n     *\n     * @param  {CoreModule} moduleInstantiated\n     * @returns Observable\n     */\n    private static callStart(moduleInstantiated: CoreModule): Observable<void> {\n        return Observable\n            .of(moduleInstantiated)\n            .flatMap(_ => HookManager\n                .triggerHook(\n                    ModuleEnum.OnStart.toString(),\n                    moduleInstantiated.token,\n                    moduleInstantiated.instance,\n                    null,\n                    false\n                )\n            );\n    }\n\n    /**\n     * Check if the provided module\n     * is right\n     *\n     * @param  {Type<any>} module\n     * @returns Observable\n     */\n    private static checkArg(module: Type<any>): Observable<Type<any>> {\n        return Observable\n            .of(module)\n            .do(_ => this.module = null)\n            .do(_ => this.extensions = null)\n            .flatMap(_ => !!_ ?\n                Observable.of(_) :\n                Observable.throw(new Error('Bootstrap failed: no module provided'))\n            )\n            .flatMap(_ => typeof _ === 'function' ?\n                Observable.of(_) :\n                Observable.throw(new Error('Bootstrap failed: module must be a function/class'))\n            );\n    }\n\n    /**\n     * Convert an extension type to ExtensionWithConfig\n     *\n     * @param  {} extension\n     * @returns ExtensionWithConfig\n     */\n    private static toExtensionWithConfig(extension): ExtensionWithConfig {\n        if (extension && <ExtensionWithConfig>extension.token) {\n            return <ExtensionWithConfig>extension;\n        }\n        return {\n            token: <Type<any>>extension,\n            config: {}\n        };\n    }\n\n    /**\n     * Call the OnExtensionLoad hook\n     * of an extension\n     *\n     * @param  {ExtensionWithConfig} extension\n     * @returns Observable\n     */\n    private static loadExtention(extension: ExtensionWithConfig, module: CoreModule): Observable<Extension> {\n        return Observable\n            .of(Reflect.construct(extension.token, []))\n            .do(_ => this.logger.debug(`loading ${extension.token.name}`))\n            .switchMap(instance =>\n                HookManager\n                    .triggerHook(\n                        ExtentionHooksEnum.OnExtensionLoad.toString(),\n                        extension.token,\n                        instance,\n                        [ module, extension.config ]\n                    )\n            );\n    }\n\n    /**\n     * Call the OnModuleInstantiated hook\n     * of an extension\n     *\n     * @param  {Extension} extension\n     * @returns Observable\n     */\n    private static moduleInstantiated(extension: Extension, module: CoreModule): Observable<void> {\n        return HookManager\n            .triggerHook(\n                ExtentionHooksEnum.OnModuleInstantiated.toString(),\n                extension.token,\n                extension.instance,\n                [ module, extension.value ]\n            )\n            .do(_ => this.logger.debug(`moduleInstantiated ${extension.token.name}`))\n            .defaultIfEmpty(null);\n    }\n\n}\n\n/**\n * Error handler\n * Call onError of Root module\n * Or log in console\n *\n * @param  {Error} error\n * @param  {any} data\n * @returns void\n */\nexport function errorHandler(error: Error, data?: any): void {\n    Observable\n        .of(Hapiness['module'])\n        .filter(_ => !!(_ && _.instance))\n        .flatMap(_ =>\n            HookManager\n                .hasLifecycleHook(ModuleEnum.OnError.toString(), _.token) ?\n            HookManager\n                .triggerHook(\n                    ModuleEnum.OnError.toString(),\n                    _.token,\n                    _.instance,\n                    [ error, data ],\n                    false\n                ) :\n                Observable\n                    .throw(error)\n        )\n        .subscribe(null, _ => console.error(_));\n}\n"]}