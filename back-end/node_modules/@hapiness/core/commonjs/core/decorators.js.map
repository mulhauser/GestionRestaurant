{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../../../src/core/decorators.ts"],"names":[],"mappings":";;AAAA,+CAAgH;AACzD,eAD9C,mBAAI,CAC8C;AAAE,wBAD/B,4BAAa,CAC+B;AAArD,iBADwB,qBAAM,CACxB;AAAlB,qBAD4C,yBAAU,CAC5C;AAAoB,yBAD0B,6BAAc,CAC1B;AAAxB,mBADoD,uBAAQ,CACpD;AAUrC;;;;;;GAMG;AACH,yBAAmC,IAAY,EAAE,KAAgC;IAC7E,MAAM,CAAmB,4BAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxD,CAAC;AAFD,0CAEC;AAcY,QAAA,cAAc,GAAG,eAAe,CAAiB,gBAAgB,EAAE;IAC5E,OAAO,EAAE,SAAS;IAClB,YAAY,EAAE,SAAS;IACvB,SAAS,EAAE,SAAS;IACpB,OAAO,EAAE,SAAS;IAClB,OAAO,EAAE,SAAS;CACrB,CAAC,CAAC;AAQU,QAAA,GAAG,GAAG,4BAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC","sourcesContent":["import { Type, TypeDecorator, makeDecorator, Inject, Injectable, InjectionToken, Optional } from 'injection-js';\nexport { Injectable, Inject, Optional, InjectionToken, Type, makeDecorator };\n\n/**\n * Decorator signature\n */\nexport interface CoreDecorator<T> {\n    (obj: T): TypeDecorator;\n    new (obj: T): T\n}\n\n/**\n * Create a decorator with metadata\n *\n * @param  {string} name\n * @param  {{[name:string]:any;}} props?\n * @returns CoreDecorator\n */\nexport function createDecorator<T>(name: string, props?: { [name: string]: any; }): CoreDecorator<T> {\n    return <CoreDecorator<T>>makeDecorator(name, props);\n}\n\n/**\n * HapinessModule decorator and metadata.\n *\n * @Annotation\n */\nexport interface HapinessModule {\n    version: string;\n    declarations?: Array<Type<any>|any>;\n    providers?: Array<Type<any>|any>;\n    imports?: Array<Type<any>|any>;\n    exports?: Array<Type<any>|any>;\n}\nexport const HapinessModule = createDecorator<HapinessModule>('HapinessModule', {\n    version: undefined,\n    declarations: undefined,\n    providers: undefined,\n    imports: undefined,\n    exports: undefined\n});\n\n/**\n * Lib decorator and metadata.\n *\n * @Annotation\n */\nexport interface Lib {}\nexport const Lib = makeDecorator('Lib', null);\n"]}