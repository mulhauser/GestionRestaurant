{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../src/lib/helper.ts"],"names":[],"mappings":";;AAAA,yCAAgD;AAChD,qCAAmD;AAEnD,MAAM,qBAAqB,GAAG,EAAE,CAAC;AACjC,MAAM,wBAAwB,GAAG,IAAI,qBAAc,CAAC,iBAAiB,CAAC,CAAC;AAOvE;IAEI,MAAM,CAAC,iBAAiB,CAAC,GAAY;QACjC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,wBAAwB,CAAC;QACpC,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9B,qBAAqB,CAAC,GAAG,CAAC,GAAG,IAAI,qBAAc,CAAC,mBAAmB,GAAG,EAAE,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAY,EAAE,KAAW;QACxC,MAAM,OAAO,GAAG,YAAY,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QACpD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,4CAA4C;YAC5C,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC;oBACH,OAAO;oBACP,QAAQ,EAAE,eAAM,CAAC,eAAe,CAAC,KAAK,CAAC;iBAC1C,CAAA;YACL,CAAC;YAAC,IAAI;YACF,kDAAkD;YAClD,+CAA+C;YACjD,EAAE,CAAC,CAAC,eAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC;oBACH,OAAO;oBACP,QAAQ,EAAE,eAAM,CAAC,GAAG,CAAC,GAAG,CAAC;iBAC5B,CAAC;YACN,CAAC;QACL,CAAC;QAED,kDAAkD;QAClD,MAAM,CAAC;YACH,OAAO;YACP,QAAQ,EAAE,eAAM,CAAC,IAAI,EAAE;SAC1B,CAAC;IACN,CAAC;CAEJ;AAzCD,oCAyCC","sourcesContent":["import { InjectionToken } from '@hapiness/core';\nimport { Config, ConfigInterface } from './config';\n\nconst ConfigInjectionTokens = {};\nconst ConfigFileInjectionToken = new InjectionToken('HAPINESS_CONFIG');\n\nexport type ConfigProvider = {\n    provide: InjectionToken<any>,\n    useValue: ConfigInterface\n}\n\nexport class ConfigHelper {\n\n    static getInjectionToken(key?: string): InjectionToken<any> {\n        if (!key) {\n            return ConfigFileInjectionToken;\n        }\n\n        if (!ConfigInjectionTokens[key]) {\n            ConfigInjectionTokens[key] = new InjectionToken(`HAPINESS_CONFIG_${key}`);\n        }\n\n        return ConfigInjectionTokens[key];\n    }\n\n    static getProvider(key?: string, value?: any): ConfigProvider {\n        const provide = ConfigHelper.getInjectionToken(key);\n        if (key) {\n            // key and value provided, we load the value\n            if ((typeof value === 'object' && value !== null)) {\n                return {\n                    provide,\n                    useValue: Config.attachProtoDeep(value)\n                }\n            } else\n                // If we dont have any value but a key we check if\n                // the key exists in config and use it as value\n              if (Config.has(key)) {\n                return {\n                    provide,\n                    useValue: Config.get(key)\n                };\n            }\n        }\n\n        // Otherwise just return the default config object\n        return {\n            provide,\n            useValue: Config.load()\n        };\n    }\n\n}\n"]}