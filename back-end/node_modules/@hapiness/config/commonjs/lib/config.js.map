{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../src/lib/config.ts"],"names":[],"mappings":";;AAAA,4BAA4B;AAC5B,+BAA+B;AAO/B;IAII;;OAEG;IACH,MAAM,CAAC,IAAI,CAAC,OAAa;QACrB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,gDAAgD;YAChD,yCAAyC;YACzC,yDAAyD;YACzD,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,OAAO;QAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,OAAO;QACV,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,GAAG,CAAC,GAAW;QAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,GAAG,CAAsB,GAAW,EAAE,YAAkB;QAC3D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,IAAI,CAAC,IAAI,EAAE,CAAC;QAChB,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAI,GAAG,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC;IAClD,CAAC;CAEJ;AA/DD,wBA+DC","sourcesContent":["import * as c from 'config';\nimport * as clone from 'clone';\nimport { IConfig } from 'config';\n\nexport interface ConfigInterface extends IConfig {\n    get<T = ConfigInterface>(key: string): T;\n}\n\nexport class Config {\n\n    private static _data: ConfigInterface;\n\n    /**\n     * Load the config\n     */\n    static load(payload?: any): ConfigInterface {\n        if (payload) {\n            // This method will make the payload object have\n            // .get (chainable) .has and .util method\n            // Allowing custom object to be feed in the config module\n            const _payload = clone(payload);\n            this._data = this.attachProtoDeep(_payload);\n            return _payload;\n        }\n\n        this._data = c;\n        return this._data;\n    }\n\n    static attachProtoDeep(payload): ConfigInterface {\n        return this._data.util['attachProtoDeep'](payload);\n    }\n\n    /**\n     * Return config data\n     */\n    static getData() {\n        return this._data;\n    }\n\n    /**\n     * Check if the settings exists\n     *\n     * @param  {string} key\n     * @returns boolean\n     */\n    static has(key: string): boolean {\n        return this._data.has(key);\n    }\n\n    /**\n     * Return the config value\n     * from a key\n     *\n     * @param  {string} key\n     * @param  {any} defaultValue\n     * @returns any\n     */\n    static get<T = ConfigInterface>(key: string, defaultValue?: any): T {\n        if (!this._data) {\n            this.load();\n        }\n\n        if (!this._data) {\n            throw new Error('Empty config data');\n        }\n\n        return this._data.has(key) ? this._data.get<T>(key) :\n            !!defaultValue ? defaultValue : undefined;\n    }\n\n}\n"]}