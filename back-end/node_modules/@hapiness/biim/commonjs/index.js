"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const Boom = require("boom");
__export(require("./biim.module"));
class Biim {
    static dataInPayload(error, payload) {
        if (error.output && error.output.payload && typeof payload === 'object') {
            error.output.payload = Object.assign({}, error.output.payload, payload);
        }
        return this.generateKey(error);
    }
    static generateKey(error) {
        error.data = error.data || {};
        const k = error.data.key || error.output.payload['key'];
        const _key = !!k && typeof k === 'string' ? k.indexOf('E_') === 0 ? k : `E_${k}` : undefined;
        const key = _key || `E_${this.messageToKey(error.message)}`;
        error.data.key = key.toUpperCase();
        error.output.payload['key'] = key.toUpperCase();
        return error;
    }
    static messageToKey(message = '') {
        return message
            .replace(/\s+/g, '_')
            .replace(/\.+/g, '_')
            .replace(/-+/g, '_')
            .split(':')
            .shift();
    }
    static wrap(error, statusCode, message, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 4) {
            args.pop();
        }
        return this.dataInPayload(Boom.wrap.apply(Boom, args), payload);
    }
    static create(statusCode, message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 4) {
            args.pop();
        }
        return this.dataInPayload(Boom.create.apply(Boom, arguments), payload);
    }
    static badRequest(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.badRequest.apply(Boom, args), payload);
    }
    static unauthorized(message, scheme, attributes, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 4) {
            args.pop();
        }
        return this.dataInPayload(Boom.unauthorized.apply(Boom, args), payload);
    }
    static paymentRequired(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom['paymentRequired'].apply(Boom, args), payload);
    }
    static forbidden(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.forbidden.apply(Boom, args), payload);
    }
    static notFound(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.notFound.apply(Boom, args), payload);
    }
    static methodNotAllowed(message, data, allow, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 4) {
            args.pop();
        }
        return this.dataInPayload(Boom.methodNotAllowed.apply(Boom, args), payload);
    }
    static notAcceptable(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.notAcceptable.apply(Boom, args), payload);
    }
    static proxyAuthRequired(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.proxyAuthRequired.apply(Boom, args), payload);
    }
    static clientTimeout(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.clientTimeout.apply(Boom, args), payload);
    }
    static conflict(message, data, payload) {
        // get args array
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.conflict.apply(Boom, args), payload);
    }
    static resourceGone(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.resourceGone.apply(Boom, args), payload);
    }
    static lengthRequired(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.lengthRequired.apply(Boom, args), payload);
    }
    static preconditionFailed(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.preconditionFailed.apply(Boom, args), payload);
    }
    static entityTooLarge(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.entityTooLarge.apply(Boom, args), payload);
    }
    static uriTooLong(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.uriTooLong.apply(Boom, args), payload);
    }
    static unsupportedMediaType(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.unsupportedMediaType.apply(Boom, args), payload);
    }
    static rangeNotSatisfiable(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.rangeNotSatisfiable.apply(Boom, args), payload);
    }
    static expectationFailed(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.expectationFailed.apply(Boom, args), payload);
    }
    static teapot(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.teapot.apply(Boom, args), payload);
    }
    static badData(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.badData.apply(Boom, args), payload);
    }
    static locked(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.locked.apply(Boom, args), payload);
    }
    static preconditionRequired(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.preconditionRequired.apply(Boom, args), payload);
    }
    static tooManyRequests(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.tooManyRequests.apply(Boom, args), payload);
    }
    static illegal(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.illegal.apply(Boom, args), payload);
    }
    static internal(message, data, statusCode, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 4) {
            args.pop();
        }
        return this.dataInPayload(Boom.internal.apply(Boom, args), payload);
    }
    static notImplemented(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.notImplemented.apply(Boom, args), payload);
    }
    static badGateway(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.badGateway.apply(Boom, args), payload);
    }
    static serverUnavailable(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.serverUnavailable.apply(Boom, args), payload);
    }
    static gatewayTimeout(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.gatewayTimeout.apply(Boom, args), payload);
    }
    static badImplementation(message, data, payload) {
        const args = [...arguments];
        // delete payload if exists
        if (args.length === 3) {
            args.pop();
        }
        return this.dataInPayload(Boom.badImplementation.apply(Boom, args), payload);
    }
}
exports.Biim = Biim;
//# sourceMappingURL=index.js.map