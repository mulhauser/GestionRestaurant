{"version":3,"file":"swag.module.js","sourceRoot":"","sources":["../../../src/module/swag.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,uDAAuD;AACvD,+BAA+B;AAC/B,iCAAiC;AACjC,gDAA6C;AAC7C,yCASwB;AAExB,MAAM,kBAAkB,GAAG,IAAI,qBAAc,CAAC,oBAAoB,CAAC,CAAC;AAKpE,IAAa,UAAU,kBAAvB;IASI,YAA2C,MAAc,EACG,MAAM;QADvB,WAAM,GAAN,MAAM,CAAQ;QACG,WAAM,GAAN,MAAM,CAAA;IAClE,CAAC;IATD,MAAM,CAAC,SAAS,CAAC,MAAW;QACxB,MAAM,CAAC;YACH,MAAM,EAAE,YAAU;YAClB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;SACjE,CAAC;IACN,CAAC;IAMD,UAAU;QACN,+DAA+D;QAC/D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CACvB,EAAE,EACF;YACI,QAAQ,EAAE,MAAM;SACnB,EACD,IAAI,CAAC,MAAM,EACX;YACI,IAAI,EAAE,MAAM,CAAC,MAAM,CACf,EAAE,EACF;gBACI,KAAK,EAAE,aAAa;aACvB,EACD;gBACI,OAAO,EAAE,OAAO;aACnB,EACD,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,IAAI,CAC3B;SACJ,CACJ,CAAC;QAEF,MAAM,CAAC,uBAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC/C,KAAK;YACL,MAAM;YACN;gBACI,QAAQ,EAAE,WAAW;gBACrB,OAAO,EAAE,IAAI,CAAC,MAAM;aACvB;SACJ,CAAC,CAAC,CAAC;IACR,CAAC;CACJ,CAAA;AA5CY,UAAU;IAHtB,qBAAc,CAAC;QACZ,OAAO,EAAE,OAAO;KACnB,CAAC;IAUe,WAAA,aAAM,CAAC,oBAAa,CAAC,CAAA;IACrB,WAAA,eAAQ,EAAE,CAAA,EAAE,WAAA,aAAM,CAAC,kBAAkB,CAAC,CAAA;qCADA,aAAM;GAThD,UAAU,CA4CtB;AA5CY,gCAAU","sourcesContent":["import * as HapiSwagger from '@reptilbud/hapi-swagger';\nimport * as Inert from 'inert';\nimport * as Vision from 'vision';\nimport { Observable } from 'rxjs/Observable';\nimport {\n    HapinessModule,\n    Optional,\n    Inject,\n    CoreModuleWithProviders,\n    HttpServerExt,\n    InjectionToken,\n    OnRegister,\n    Server\n} from '@hapiness/core';\n\nconst SWAG_MODULE_CONFIG = new InjectionToken('swag_module_config');\n\n@HapinessModule({\n    version: '1.1.0'\n})\nexport class SwagModule implements OnRegister {\n\n    static setConfig(config: any): CoreModuleWithProviders {\n        return {\n            module: SwagModule,\n            providers: [{ provide: SWAG_MODULE_CONFIG, useValue: config }]\n        };\n    }\n\n    constructor(@Inject(HttpServerExt) private server: Server,\n                @Optional() @Inject(SWAG_MODULE_CONFIG) private config) {\n    }\n\n    onRegister() {\n        // Add some default values (in case of no config were provided)\n        this.config = Object.assign(\n            {},\n            {\n                grouping: 'tags',\n            },\n            this.config,\n            {\n                info: Object.assign(\n                    {},\n                    {\n                        title: 'Module name'\n                    },\n                    {\n                        version: '1.0.0'\n                    },\n                    (this.config || {}).info\n                )\n            }\n        );\n\n        return Observable.fromPromise(this.server.register([\n            Inert,\n            Vision,\n            {\n                register: HapiSwagger,\n                options: this.config\n            }\n        ]));\n    }\n}\n"]}