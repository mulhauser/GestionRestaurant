{"version":3,"file":"order.model.js","sourceRoot":"","sources":["../../../src/models/order/order.model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAAwE;AACxE,6CAA0C;AAC1C,sDAAgD;AAChD,mDAA6C;AAO7C,IAAa,UAAU,kBAAvB,gBAAwB,SAAQ,aAAK;IAIjC;;;;OAIG;IACH,YAAoB,mBAAuC;QACvD,0BAA0B;QAC1B,KAAK,CAAC,YAAU,CAAC,CAAC;QAFF,wBAAmB,GAAnB,mBAAmB,CAAoB;QAIvD,UAAU;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,gBAAgB;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,KAAK,EAAE,EAAE,IAAI,EAAE,wBAAU,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC3C,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC3C,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC1C,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;YACzC,SAAS,EAAE,IAAI;YACf,MAAM,EAAE;gBACJ,EAAE,IAAI,EAAE,sBAAS,EAAE;aACtB;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,sDAAsD;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YAClB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;IACN,CAAC;CACJ,CAAA;AAxCY,UAAU;IALtB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,QAAQ;QACpB,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC;KACjC,CAAC;qCAU2C,0BAAkB;GATlD,UAAU,CAwCtB;AAxCY,gCAAU","sourcesContent":["import { Model, MongoClientService, MongoModel } from '@hapiness/mongo';\r\nimport { Config } from '@hapiness/config';\r\nimport {TableModel} from '../table/table.model';\r\nimport {DishModel} from '../dish/dish.model';\r\n\r\n@MongoModel({\r\n    adapter: 'mongoose',\r\n    collection: 'orders',\r\n    options: Config.get('mongodb')\r\n})\r\nexport class OrderModel extends Model {\r\n    // property to store schema\r\n    readonly schema: any;\r\n\r\n    /**\r\n     * Class constructor\r\n     *\r\n     * @param {MongoClientService} _mongoClientService\r\n     */\r\n    constructor(private _mongoClientService: MongoClientService) {\r\n        // call parent constructor\r\n        super(OrderModel);\r\n\r\n        // get dao\r\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\r\n\r\n        // create schema\r\n        this.schema = new dao.Schema({\r\n            table: { type: TableModel, required: true },\r\n            isServed: { type: Boolean, required: true },\r\n            isPayed: { type: Boolean, required: true },\r\n            orderDate: { type: Date, required: true },\r\n            serveDate: Date,\r\n            dishes: [\r\n                { type: DishModel }\r\n            ]\r\n        }, {\r\n            versionKey: false\r\n        });\r\n\r\n        // implement virtual method toJSON to delete _id field\r\n        this.schema.set('toJSON', {\r\n                virtuals: true,\r\n                transform: function (doc, ret) {\r\n                    delete ret._id;\r\n                    return ret;\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n"]}