{"version":3,"file":"people.model.js","sourceRoot":"","sources":["../../../src/models/people/people.model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAAwE;AACxE,6CAA0C;AAO1C,IAAa,WAAW,mBAAxB,iBAAyB,SAAQ,aAAK;IAIlC;;;;OAIG;IACH,YAAoB,mBAAuC;QACvD,0BAA0B;QAC1B,KAAK,CAAC,aAAW,CAAC,CAAC;QAFH,wBAAmB,GAAnB,mBAAmB,CAAoB;QAIvD,UAAU;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,gBAAgB;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,KAAK,EAAE,MAAM;YACb,SAAS,EAAE;gBACP,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACjB;YACD,QAAQ,EAAE;gBACN,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACjB;YACD,KAAK,EAAE;gBACH,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACjB;YACD,KAAK,EAAE;gBACH,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;aACjB;YACD,OAAO,EAAE;gBACL,MAAM,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;iBACjB;gBACD,UAAU,EAAE;oBACR,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;iBACjB;gBACD,IAAI,EAAE;oBACF,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;iBACjB;aACJ;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,sDAAsD;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YAClB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;IACN,CAAC;CACJ,CAAA;AA/DY,WAAW;IALvB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,SAAS;QACrB,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC;KACjC,CAAC;qCAU2C,0BAAkB;GATlD,WAAW,CA+DvB;AA/DY,kCAAW","sourcesContent":["import { Model, MongoClientService, MongoModel } from '@hapiness/mongo';\r\nimport { Config } from '@hapiness/config';\r\n\r\n@MongoModel({\r\n    adapter: 'mongoose',\r\n    collection: 'peoples',\r\n    options: Config.get('mongodb')\r\n})\r\nexport class PeopleModel extends Model {\r\n    // property to store schema\r\n    readonly schema: any;\r\n\r\n    /**\r\n     * Class constructor\r\n     *\r\n     * @param {MongoClientService} _mongoClientService\r\n     */\r\n    constructor(private _mongoClientService: MongoClientService) {\r\n        // call parent constructor\r\n        super(PeopleModel);\r\n\r\n        // get dao\r\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\r\n\r\n        // create schema\r\n        this.schema = new dao.Schema({\r\n            photo: String,\r\n            firstname: {\r\n                type: String,\r\n                required: true\r\n            },\r\n            lastname: {\r\n                type: String,\r\n                required: true\r\n            },\r\n            email: {\r\n                type: String,\r\n                required: true\r\n            },\r\n            phone: {\r\n                type: String,\r\n                required: true\r\n            },\r\n            address: {\r\n                street: {\r\n                    type: String,\r\n                    required: true\r\n                },\r\n                postalCode: {\r\n                    type: Number,\r\n                    required: true\r\n                },\r\n                city: {\r\n                    type: String,\r\n                    required: true\r\n                }\r\n            }\r\n        }, {\r\n            versionKey: false\r\n        });\r\n\r\n        // implement virtual method toJSON to delete _id field\r\n        this.schema.set('toJSON', {\r\n                virtuals: true,\r\n                transform: function (doc, ret) {\r\n                    delete ret._id;\r\n                    return ret;\r\n                }\r\n            }\r\n        );\r\n    }\r\n}\r\n"]}