{"version":3,"file":"dish.model.js","sourceRoot":"","sources":["../../../src/models/dish/dish.model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAAwE;AACxE,6CAA0C;AAO1C,IAAa,SAAS,iBAAtB,eAAuB,SAAQ,aAAK;IAKhC;;;;OAIG;IACH,YAAoB,mBAAuC;QACvD,0BAA0B;QAC1B,KAAK,CAAC,WAAS,CAAC,CAAC;QAFD,wBAAmB,GAAnB,mBAAmB,CAAoB;QAIvD,UAAU;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YAC9B,aAAa,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC/C,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;SAChD,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE;YACvB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,OAAO,GAAG,CAAC,EAAE,CAAC;gBACd,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;QAEF,gBAAgB;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YACtC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YACvC,WAAW,EAAE;gBACT,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE;aAC7C;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAGH,sDAAsD;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YAClB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;IACN,CAAC;CACJ,CAAA;AAvDY,SAAS;IALrB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,QAAQ;QACpB,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC;KACjC,CAAC;qCAW2C,0BAAkB;GAVlD,SAAS,CAuDrB;AAvDY,8BAAS","sourcesContent":["import { Model, MongoClientService, MongoModel } from '@hapiness/mongo';\nimport { Config } from '@hapiness/config';\n\n@MongoModel({\n    adapter: 'mongoose',\n    collection: 'dishes',\n    options: Config.get('mongodb')\n})\nexport class DishModel extends Model {\n    // property to store schema\n    readonly schema: any;\n    readonly childSchema: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        // call parent constructor\n        super(DishModel);\n\n        // get dao\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\n\n        this.childSchema = new dao.Schema({\n            refIngredient: { type: String, required: true },\n            quantityUse: { type: Number, required: true }\n        }, {\n            versionKey: false\n        });\n        this.childSchema.set('toJSON', {\n                virtuals: true,\n                transform: function (doc, ret) {\n                    delete ret._id;\n                    delete ret.id;\n                    return ret;\n                }\n            }\n        );\n\n        // create schema\n        this.schema = new dao.Schema({\n            name: { type: String, required: true },\n            price: { type: Number, required: true },\n            ingredients: [\n                { type: this.childSchema, required: true }\n            ]\n        }, {\n            versionKey: false\n        });\n\n\n        // implement virtual method toJSON to delete _id field\n        this.schema.set('toJSON', {\n                virtuals: true,\n                transform: function (doc, ret) {\n                    delete ret._id;\n                    return ret;\n                }\n            }\n        );\n    }\n}\n"]}