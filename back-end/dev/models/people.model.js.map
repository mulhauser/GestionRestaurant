{"version":3,"file":"people.model.js","sourceRoot":"","sources":["../../src/models/people.model.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAAsE;AACtE,6CAAwC;AAQxC,IAAa,WAAW,mBAAxB,iBAAyB,SAAQ,aAAK;IAGlC,YAAoB,mBAAuC;QACvD,KAAK,CAAC,aAAW,CAAC,CAAC;QADH,wBAAmB,GAAnB,mBAAmB,CAAoB;QAGvD,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,KAAK,EAAE,MAAM;YACb,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC3C,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YAC1C,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,wCAAwC,EAAE;YACxF,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;YACvC,MAAM,EAAE;gBACJ,OAAO,EAAE;oBACL,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;oBACxC,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;oBAC5C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;iBACzC;aACJ;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YACtB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,MAAM,CAAC,GAAG,CAAC;YACf,CAAC;SACJ,CAAC,CAAC;IAEP,CAAC;CACJ,CAAA;AAlCY,WAAW;IANvB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,SAAS;QACrB,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC;KACjC,CAAC;qCAK2C,0BAAkB;GAHlD,WAAW,CAkCvB;AAlCY,kCAAW","sourcesContent":["import {Model, MongoClientService, MongoModel} from '@hapiness/mongo';\nimport {Config} from '@hapiness/config';\n\n@MongoModel({\n    adapter: 'mongoose',\n    collection: 'peoples',\n    options: Config.get('mongodb')\n})\n\nexport class PeopleModel extends Model {\n    readonly schema: any;\n\n    constructor(private _mongoClientService: MongoClientService) {\n        super(PeopleModel);\n\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\n\n        this.schema = new dao.Schema({\n            photo: String,\n            firstname: { type: String, required: true },\n            lastname: { type: String, required: true },\n            email: { type: String, required: true, match: '[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}' },\n            phone: { type: String, required: true },\n            nested: {\n                address: {\n                    street: { type: String, required: true },\n                    postalCode: { type: Number, required: true },\n                    city: { type: String, required: true }\n                }\n            }\n        }, {\n            versionKey: false\n        });\n\n        this.schema.set('toJSON', {\n            virtuals: true,\n            transform: function (doc, ret) {\n                delete ret._id;\n                return ret;\n            }\n        });\n\n    }\n}\n"]}