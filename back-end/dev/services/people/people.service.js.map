{"version":3,"file":"people.service.js","sourceRoot":"","sources":["../../../src/services/people/people.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA4C;AAE5C,yCAAsC;AAItC,wDAA2D;AAE3D,2CAAwC;AACxC,iDAA+C;AAC/C,8CAA0D;AAG1D,IAAa,aAAa,GAA1B;IACI;;OAEG;IACH,YAAoB,sBAA6C;QAA7C,2BAAsB,GAAtB,sBAAsB,CAAuB;IAAG,CAAC;IAErE;;;;OAIG;IACH,OAAO;QACH,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;IAC9C,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,EAAU;QACV,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC1C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CAChE,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,MAAc;QACjB,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,MAAM,CAAC;aAC5C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EACjD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,CAC/C,CAAC;IACV,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,EAAU,EAAE,MAAc;QAC7B,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC;aAC3D,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CAChE,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACnD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,CAChE,CACJ,CAAC;IACV,CAAC;CACJ,CAAA;AAvFY,aAAa;IADzB,iBAAU,EAAE;qCAKmC,uCAAqB;GAJxD,aAAa,CAuFzB;AAvFY,sCAAa","sourcesContent":["import { Injectable } from '@hapiness/core';\r\nimport { HapinessHTTPHandlerResponse } from '@hapiness/core/extensions/http-server';\r\nimport { Biim } from '@hapiness/biim';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { People } from '../../interfaces';\r\nimport { PeopleDocumentService } from '../people-document';\r\n\r\nimport { of } from 'rxjs/observable/of';\r\nimport { _throw } from 'rxjs/observable/throw';\r\nimport { flatMap, map, catchError } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class PeopleService {\r\n    /**\r\n     * Class constructor\r\n     */\r\n    constructor(private _peopleDocumentService: PeopleDocumentService) {}\r\n\r\n    /**\r\n     * Returns all existing people in the list\r\n     *\r\n     * @returns {Observable<People[]>}\r\n     */\r\n    listAll(): Observable<People[] | void> {\r\n        return this._peopleDocumentService.find();\r\n    }\r\n\r\n    /**\r\n     * Returns one people of the list matching id in parameter\r\n     *\r\n     * @param {string} id of the people\r\n     *\r\n     * @returns {Observable<People>}\r\n     */\r\n    one(id: string): Observable<People> {\r\n        return this._peopleDocumentService.findById(id)\r\n            .pipe(\r\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\r\n                flatMap(_ =>\r\n                    !!_ ?\r\n                        of(_) :\r\n                        _throw(Biim.notFound(`People with id '${id}' not found`))\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Check if person already exists and add it in people list\r\n     *\r\n     * @param person to create\r\n     *\r\n     * @returns {Observable<HapinessHTTPHandlerResponse>}\r\n     */\r\n    create(person: People): Observable<HapinessHTTPHandlerResponse> {\r\n        return this._peopleDocumentService.create(person)\r\n            .pipe(\r\n                catchError(e => _throw(Biim.conflict(e.message))),\r\n                map(_ => ({ response: _, statusCode: 201 }))\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update a person in people list\r\n     *\r\n     * @param {string} id of the person to update\r\n     * @param person data to update\r\n     *\r\n     * @returns {Observable<People>}\r\n     */\r\n    update(id: string, person: People): Observable<People> {\r\n        return this._peopleDocumentService.findByIdAndUpdate(id, person)\r\n            .pipe(\r\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\r\n                flatMap(_ =>\r\n                    !!_ ?\r\n                        of(_) :\r\n                        _throw(Biim.notFound(`People with id '${id}' not found`))\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Deletes on person in people list\r\n     *\r\n     * @param {string} id of the person to delete\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    delete(id: string): Observable<void> {\r\n        return this._peopleDocumentService.findByIdAndRemove(id)\r\n            .pipe(\r\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\r\n                flatMap(_ =>\r\n                    !!_ ?\r\n                        of(undefined) :\r\n                        _throw(Biim.notFound(`People with id '${id}' not found`))\r\n                )\r\n            );\r\n    }\r\n}\r\n"]}