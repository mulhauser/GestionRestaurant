{"version":3,"file":"table.service.js","sourceRoot":"","sources":["../../../src/services/table/table.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA4C;AAE5C,yCAAsC;AAGtC,2CAAwC;AACxC,iDAA+C;AAC/C,8CAA0D;AAE1D,qFAA8E;AAG9E,IAAa,YAAY,GAAzB;IACI;;OAEG;IACH,YAAoB,qBAA2C;QAA3C,0BAAqB,GAArB,qBAAqB,CAAsB;IAAG,CAAC;IAEnE;;;;OAIG;IACH,OAAO;QACH,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IAC7C,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,EAAU;QACV,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,EAAE,CAAC;aACzC,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAC/D,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,KAAY;QACf,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC;aAC1C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EACjD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,CAC/C,CAAC;IACV,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,EAAU,EAAE,KAAY;QAC3B,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,EAAE,EAAE,KAAK,CAAC;aACzD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAC/D,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,EAAE,CAAC;aAClD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,cAAM,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC3D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,OAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,cAAM,CAAC,WAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAC/D,CACJ,CAAC;IACV,CAAC;CACJ,CAAA;AAvFY,YAAY;IADxB,iBAAU,EAAE;qCAKkC,6CAAoB;GAJtD,YAAY,CAuFxB;AAvFY,oCAAY","sourcesContent":["import { Injectable } from '@hapiness/core';\nimport { HapinessHTTPHandlerResponse } from '@hapiness/core/extensions/http-server';\nimport { Biim } from '@hapiness/biim';\nimport { Observable } from 'rxjs/Observable';\n\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { flatMap, map, catchError } from 'rxjs/operators';\nimport {Table} from '../../interfaces/table';\nimport {TableDocumentService} from '../table-document/table-document.service';\n\n@Injectable()\nexport class TableService {\n    /**\n     * Class constructor\n     */\n    constructor(private _tableDocumentService: TableDocumentService) {}\n\n    /**\n     * Returns all existing people in the list\n     *\n     * @returns {Observable<People[]>}\n     */\n    listAll(): Observable<Table[] | void> {\n        return this._tableDocumentService.find();\n    }\n\n    /**\n     * Returns one people of the list matching id in parameter\n     *\n     * @param {string} id of the people\n     *\n     * @returns {Observable<People>}\n     */\n    one(id: string): Observable<Table> {\n        return this._tableDocumentService.findById(id)\n            .pipe(\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        _throw(Biim.notFound(`Table with id '${id}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Check if person already exists and add it in people list\n     *\n     * @param person to create\n     *\n     * @returns {Observable<HapinessHTTPHandlerResponse>}\n     */\n    create(table: Table): Observable<HapinessHTTPHandlerResponse> {\n        return this._tableDocumentService.create(table)\n            .pipe(\n                catchError(e => _throw(Biim.conflict(e.message))),\n                map(_ => ({ response: _, statusCode: 201 }))\n            );\n    }\n\n    /**\n     * Update a person in people list\n     *\n     * @param {string} id of the person to update\n     * @param person data to update\n     *\n     * @returns {Observable<People>}\n     */\n    update(id: string, table: Table): Observable<Table> {\n        return this._tableDocumentService.findByIdAndUpdate(id, table)\n            .pipe(\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        _throw(Biim.notFound(`Table with id '${id}' not found`))\n                )\n            );\n    }\n\n    /**\n     * Deletes on person in people list\n     *\n     * @param {string} id of the person to delete\n     *\n     * @returns {Observable<any>}\n     */\n    delete(id: string): Observable<void> {\n        return this._tableDocumentService.findByIdAndRemove(id)\n            .pipe(\n                catchError(e => _throw(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(undefined) :\n                        _throw(Biim.notFound(`Table with id '${id}' not found`))\n                )\n            );\n    }\n}\n"]}