{"version":3,"file":"ingredient-document.service.js","sourceRoot":"","sources":["../../../src/services/ingredient-document/ingredient-document.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@hapiness/core';\nimport { MongoClientService } from '@hapiness/mongo';\nimport { MongooseDocument } from 'mongoose';\nimport { Observable } from 'rxjs/Observable';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { flatMap, filter, map } from 'rxjs/operators';\nimport { mergeStatic } from 'rxjs/operators/merge';\n\nimport { Ingredient } from '../../interfaces';\nimport { Config } from '@hapiness/config';\nimport {IngredientModel} from '../../models/ingredient/ingredient.model';\n\n@Injectable()\nexport class IngredientDocumentService {\n    // private property to store document instance\n    private _document: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        this._document = this._mongoClientService.getModel({\n            adapter: 'mongoose',\n            options: Config.get('mongodb')\n        }, IngredientModel);\n    }\n\n    /**\n     * Call mongoose method, call toJSON on each result and returns People[] or undefined\n     *\n     * @return {Observable<Room[] | void>}\n     */\n    find(): Observable<Ingredient[] | void> {\n        return fromPromise(this._document.find({}))\n            .pipe(\n                flatMap((docs: MongooseDocument[]) =>\n                    of(of(docs))\n                        .pipe(\n                            flatMap(_ =>\n                                mergeStatic(\n                                    _.pipe(\n                                        filter(__ => !!__ && __.length > 0),\n                                        map(__ => __.map(doc => doc.toJSON())),\n                                    ),\n                                    _.pipe(\n                                        filter(__ => !__ || __.length === 0),\n                                        map(__ => undefined)\n                                    )\n                                )\n                            )\n                        )\n                )\n            );\n    }\n\n    /**\n     * Returns one people of the list matching id in parameter\n     *\n     * @param {string} id of the people in the db\n     *\n     * @return {Observable<Room | void>}\n     */\n    findById(id: string): Observable<Ingredient | void> {\n        return fromPromise(this._document.findById(id))\n            .pipe(\n                flatMap((doc: MongooseDocument) =>\n                    !!doc ?\n                        of(doc.toJSON() as Ingredient) :\n                        of(undefined)\n                )\n            )\n    }\n\n    /**\n     * Check if person already exists and add it in people list\n     *\n     * @param {Room} room to create\n     *\n     * @return {Observable<Room>}\n     */\n    create(ingredient: Ingredient): Observable<Ingredient> {\n        return fromPromise(this._document.findOne({\n            name: { $regex: new RegExp(ingredient.name, 'i') },\n        }))\n            .pipe(\n                flatMap(_ => !!_ ?\n                    _throw(\n                        new Error(`Ingredient with name '${ingredient.name}' already exists`)\n                    ) :\n                    fromPromise(this._document.create(ingredient))\n                ),\n                map((doc: MongooseDocument) => doc.toJSON() as Ingredient)\n            );\n    }\n\n    /**\n     * Update a person in people list\n     *\n     * @param {string} id\n     * @param {Room} room\n     *\n     * @return {Observable<Room>}\n     */\n    findByIdAndUpdate(id: string, ingredient: Ingredient): Observable<Ingredient> {\n        return fromPromise(this._document.findByIdAndUpdate(id, ingredient, { new: true }))\n            .pipe(\n                flatMap((doc: MongooseDocument) =>\n                    !!doc ?\n                        of(doc.toJSON() as Ingredient) :\n                        of(undefined)\n                )\n            )\n    }\n\n    /**\n     * Delete a person in people list\n     *\n     * @param {string} id\n     *\n     * @return {Observable<Room>}\n     */\n    findByIdAndRemove(id: string): Observable<Ingredient> {\n        return fromPromise(this._document.findByIdAndRemove(id))\n            .pipe(\n                flatMap((doc: MongooseDocument) =>\n                    !!doc ?\n                        of(doc.toJSON() as Ingredient) :\n                        of(undefined)\n                )\n            )\n    }\n}\n"]}