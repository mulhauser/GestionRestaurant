{"version":3,"file":"ingredient-document.service.js","sourceRoot":"","sources":["../../../src/services/ingredient-document/ingredient-document.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@hapiness/core';\r\nimport { MongoClientService } from '@hapiness/mongo';\r\nimport { MongooseDocument } from 'mongoose';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { _throw } from 'rxjs/observable/throw';\r\nimport { flatMap, filter, map } from 'rxjs/operators';\r\nimport { mergeStatic } from 'rxjs/operators/merge';\r\n\r\nimport { Ingredient } from '../../interfaces';\r\nimport { Config } from '@hapiness/config';\r\nimport {IngredientModel} from '../../models/ingredient/ingredient.model';\r\n\r\n@Injectable()\r\nexport class IngredientDocumentService {\r\n    // private property to store document instance\r\n    private _document: any;\r\n\r\n    /**\r\n     * Class constructor\r\n     *\r\n     * @param {MongoClientService} _mongoClientService\r\n     */\r\n    constructor(private _mongoClientService: MongoClientService) {\r\n        this._document = this._mongoClientService.getModel({\r\n            adapter: 'mongoose',\r\n            options: Config.get('mongodb')\r\n        }, IngredientModel);\r\n    }\r\n\r\n    /**\r\n     * Call mongoose method, call toJSON on each result and returns People[] or undefined\r\n     *\r\n     * @return {Observable<Room[] | void>}\r\n     */\r\n    find(): Observable<Ingredient[] | void> {\r\n        return fromPromise(this._document.find({}))\r\n            .pipe(\r\n                flatMap((docs: MongooseDocument[]) =>\r\n                    of(of(docs))\r\n                        .pipe(\r\n                            flatMap(_ =>\r\n                                mergeStatic(\r\n                                    _.pipe(\r\n                                        filter(__ => !!__ && __.length > 0),\r\n                                        map(__ => __.map(doc => doc.toJSON())),\r\n                                    ),\r\n                                    _.pipe(\r\n                                        filter(__ => !__ || __.length === 0),\r\n                                        map(__ => undefined)\r\n                                    )\r\n                                )\r\n                            )\r\n                        )\r\n                )\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Returns one people of the list matching id in parameter\r\n     *\r\n     * @param {string} id of the people in the db\r\n     *\r\n     * @return {Observable<Room | void>}\r\n     */\r\n    findById(id: string): Observable<Ingredient | void> {\r\n        return fromPromise(this._document.findById(id))\r\n            .pipe(\r\n                flatMap((doc: MongooseDocument) =>\r\n                    !!doc ?\r\n                        of(doc.toJSON() as Ingredient) :\r\n                        of(undefined)\r\n                )\r\n            )\r\n    }\r\n\r\n    /**\r\n     * Check if person already exists and add it in people list\r\n     *\r\n     * @param {Room} room to create\r\n     *\r\n     * @return {Observable<Room>}\r\n     */\r\n    create(ingredient: Ingredient): Observable<Ingredient> {\r\n        return fromPromise(this._document.findOne({\r\n            name: { $regex: new RegExp(ingredient.name, 'i') },\r\n        }))\r\n            .pipe(\r\n                flatMap(_ => !!_ ?\r\n                    _throw(\r\n                        new Error(`Ingredient with name '${ingredient.name}' already exists`)\r\n                    ) :\r\n                    fromPromise(this._document.create(ingredient))\r\n                ),\r\n                map((doc: MongooseDocument) => doc.toJSON() as Ingredient)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Update a person in people list\r\n     *\r\n     * @param {string} id\r\n     * @param {Room} room\r\n     *\r\n     * @return {Observable<Room>}\r\n     */\r\n    findByIdAndUpdate(id: string, ingredient: Ingredient): Observable<Ingredient> {\r\n        return fromPromise(this._document.findByIdAndUpdate(id, ingredient, { new: true }))\r\n            .pipe(\r\n                flatMap((doc: MongooseDocument) =>\r\n                    !!doc ?\r\n                        of(doc.toJSON() as Ingredient) :\r\n                        of(undefined)\r\n                )\r\n            )\r\n    }\r\n\r\n    /**\r\n     * Delete a person in people list\r\n     *\r\n     * @param {string} id\r\n     *\r\n     * @return {Observable<Room>}\r\n     */\r\n    findByIdAndRemove(id: string): Observable<Ingredient> {\r\n        return fromPromise(this._document.findByIdAndRemove(id))\r\n            .pipe(\r\n                flatMap((doc: MongooseDocument) =>\r\n                    !!doc ?\r\n                        of(doc.toJSON() as Ingredient) :\r\n                        of(undefined)\r\n                )\r\n            )\r\n    }\r\n}\r\n"]}