<<<<<<< HEAD
{"version":3,"file":"application.module.js","sourceRoot":"","sources":["../src/application.module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAqF;AACrF,6CAA+D;AAE/D,yCAA0C;AAC1C,6CAAwC;AACxC,2CAAgE;AAChE,yDAAmD;AACnD,2DAA4D;AAC5D,2DAA4D;AAC5D,kEAAoE;AACpE,8DAAkE;AAClE,iEAAkE;AAClE,0FAAmF;AACnF,+DAAyD;AACzD,iEAAwE;AACxE,iEAAwE;AACxE,wEAAgF;AAChF,oEAA8E;AAC9E,uEAA8E;AAC9E,2EAAqE;AACrE,iFAA2E;AAC3E,4GAAqG;AACrG,0FAAmF;AACnF,2DAA4D;AAC5D,2DAA4D;AAC5D,kEAAoE;AACpE,8DAAkE;AAClE,iEAAkE;AAClE,yDAAmD;AACnD,+DAAyD;AAEzD,MAAM,mBAAmB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,2CAAmB,CAAC,kBAAkB,CAAC,CAAC;AACpH,MAAM,yBAAyB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,uDAAyB,CAAC,kBAAkB,CAAC,CAAC;AAChI,MAAM,mBAAmB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,2CAAmB,CAAC,kBAAkB,CAAC,CAAC;AAyBpH,IAAa,iBAAiB,GAA9B;IACI;;;;;OAKG;IACH,YAAoB,WAA8B,EAAU,OAAsB;QAA9D,gBAAW,GAAX,WAAW,CAAmB;QAAU,YAAO,GAAP,OAAO,CAAe;IAAG,CAAC;IACtF;;;;OAIG;IACH,OAAO;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gDAAgD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9G,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,KAAY,EAAE,IAAU;QAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC7E,CAAC;CACJ,CAAA;AA5BY,iBAAiB;IAvB7B,qBAAc,CAAC;QACZ,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;YACL,qBAAY;YACZ,iBAAU,CAAC,SAAS,CAAC,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,mBAAW;SACd;QACD,YAAY,EAAE;YACV,sBAAS,EAAE,2BAAe,EAAE,2BAAe,EAAE,kCAAmB,EAAE,8BAAkB,EAAE,iCAAkB;YACxG,kCAAe,EAAE,iCAAqB,EAAE,iCAAqB,EAAE,wCAAyB,EAAE,oCAAwB;YAClH,uCAAwB;YACxB,sBAAS,EAAE,2BAAe,EAAE,2BAAe,EAAE,kCAAmB,EAAE,8BAAkB,EAAE,iCAAkB;SAC3G;QACD,SAAS,EAAE;YACP,wBAAiB;YACjB,0BAAW;YACX,EAAE,OAAO,EAAE,2CAAmB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;YAC7F,sCAAiB;YACjB,EAAE,OAAO,EAAE,uDAAyB,EAAE,UAAU,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;YACzG,0BAAW;YACX,EAAE,OAAO,EAAE,2CAAmB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;SAChG;KACJ,CAAC;qCAQmC,wBAAiB,EAAmB,sBAAa;GAPzE,iBAAiB,CA4B7B;AA5BY,8CAAiB","sourcesContent":["import { HapinessModule, HttpServerService, OnError, OnStart } from '@hapiness/core';\r\nimport { LoggerModule, LoggerService } from '@hapiness/logger';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {SwagModule} from '@hapiness/swag';\r\nimport {Config} from '@hapiness/config';\r\nimport {MongoClientService, MongoModule} from '@hapiness/mongo';\r\nimport {RoomModel} from './models/room/room.model';\r\nimport {GetAllRoomRoute} from './routes/room/get/all.route';\r\nimport {GetOneRoomRoute} from './routes/room/get/one.route';\r\nimport {PostCreateRoomRoute} from './routes/room/post/create.route';\r\nimport {DeleteOneRoomRoute} from './routes/room/delete/one.route';\r\nimport {PutUpdateRoomRoute} from './routes/room/put/update.route';\r\nimport {RoomDocumentService} from './services/room-document/room-document.service';\r\nimport {RoomService} from './services/room/room.service';\r\nimport {GetAllIngredientRoute} from './routes/ingredient/get/all.route';\r\nimport {GetOneIngredientRoute} from './routes/ingredient/get/one.route';\r\nimport {PostCreateIngredientRoute} from './routes/ingredient/post/create.route';\r\nimport {DeleteOneIngredientRoute} from './routes/ingredient/delete/one.route';\r\nimport {PutUpdateIngredientRoute} from './routes/ingredient/put/update.route';\r\nimport {IngredientModel} from './models/ingredient/ingredient.model';\r\nimport {IngredientService} from './services/ingredient/ingredient.service';\r\nimport {IngredientDocumentService} from './services/ingredient-document/ingredient-document.service';\r\nimport {DishDocumentService} from './services/dish-document/dish-document.service';\r\nimport {GetAllDishRoute} from './routes/dish/get/all.route';\r\nimport {GetOneDishRoute} from './routes/dish/get/one.route';\r\nimport {PostCreateDishRoute} from './routes/dish/post/create.route';\r\nimport {DeleteOneDishRoute} from './routes/dish/delete/one.route';\r\nimport {PutUpdateDishRoute} from './routes/dish/put/update.route';\r\nimport {DishModel} from './models/dish/dish.model';\r\nimport {DishService} from './services/dish/dish.service';\r\n\r\nconst roomDocumentFactory = (mongoClientService: MongoClientService) => new RoomDocumentService(mongoClientService);\r\nconst ingredientDocumentFactory = (mongoClientService: MongoClientService) => new IngredientDocumentService(mongoClientService);\r\nconst dishDocumentFactory = (mongoClientService: MongoClientService) => new DishDocumentService(mongoClientService);\r\n\r\n@HapinessModule({\r\n    version: '1.0.0',\r\n    imports: [\r\n        LoggerModule,\r\n        SwagModule.setConfig(Config.get('swag')),\r\n        MongoModule\r\n    ],\r\n    declarations: [\r\n        RoomModel, GetAllRoomRoute, GetOneRoomRoute, PostCreateRoomRoute, DeleteOneRoomRoute, PutUpdateRoomRoute,\r\n        IngredientModel, GetAllIngredientRoute, GetOneIngredientRoute, PostCreateIngredientRoute, DeleteOneIngredientRoute,\r\n        PutUpdateIngredientRoute,\r\n        DishModel, GetAllDishRoute, GetOneDishRoute, PostCreateDishRoute, DeleteOneDishRoute, PutUpdateDishRoute\r\n    ],\r\n    providers: [\r\n        HttpServerService,\r\n        RoomService,\r\n        { provide: RoomDocumentService, useFactory: roomDocumentFactory, deps: [MongoClientService] },\r\n        IngredientService,\r\n        { provide: IngredientDocumentService, useFactory: ingredientDocumentFactory, deps: [MongoClientService] },\r\n        DishService,\r\n        { provide: DishDocumentService, useFactory: dishDocumentFactory, deps: [MongoClientService] },\r\n    ]\r\n})\r\nexport class ApplicationModule implements OnStart, OnError {\r\n    /**\r\n     * Class constructor\r\n     *\r\n     * @param {HttpServerService} _httpServer wrapper for instance of original Hapi server\r\n     * @param {LoggerService} _logger\r\n     */\r\n    constructor(private _httpServer: HttpServerService, private _logger: LoggerService) {}\r\n    /**\r\n     * On start process\r\n     *\r\n     * @return {void | Observable<any>}\r\n     */\r\n    onStart(): void | Observable<any> {\r\n        this._logger.info(`< Application.bootstrap > Server started at: ${this._httpServer.instance().info.uri}`);\r\n    }\r\n\r\n    /**\r\n     * On error process\r\n     *\r\n     * @param {Error} error\r\n     * @param data\r\n     *\r\n     * @return {void | Observable<any>}\r\n     */\r\n    onError(error: Error, data?: any): void | Observable<any> {\r\n        this._logger.error('A problem occurred during application\\'s lifecycle');\r\n    }\r\n}\r\n"]}
=======
{"version":3,"file":"application.module.js","sourceRoot":"","sources":["../src/application.module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAqF;AACrF,6CAA+D;AAE/D,yCAA0C;AAC1C,6CAAwC;AACxC,2CAAgE;AAChE,yDAAmD;AACnD,2DAA4D;AAC5D,2DAA4D;AAC5D,kEAAoE;AACpE,8DAAkE;AAClE,iEAAkE;AAClE,0FAAmF;AACnF,+DAAyD;AACzD,iEAAwE;AACxE,iEAAwE;AACxE,wEAAgF;AAChF,oEAA8E;AAC9E,uEAA8E;AAC9E,2EAAqE;AACrE,iFAA2E;AAC3E,4GAAqG;AACrG,0FAAmF;AACnF,2DAA4D;AAC5D,2DAA4D;AAC5D,kEAAoE;AACpE,8DAAkE;AAClE,iEAAkE;AAClE,yDAAmD;AACnD,+DAAyD;AAEzD,MAAM,mBAAmB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,2CAAmB,CAAC,kBAAkB,CAAC,CAAC;AACpH,MAAM,yBAAyB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,uDAAyB,CAAC,kBAAkB,CAAC,CAAC;AAChI,MAAM,mBAAmB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,2CAAmB,CAAC,kBAAkB,CAAC,CAAC;AAyBpH,IAAa,iBAAiB,GAA9B;IACI;;;;;OAKG;IACH,YAAoB,WAA8B,EAAU,OAAsB;QAA9D,gBAAW,GAAX,WAAW,CAAmB;QAAU,YAAO,GAAP,OAAO,CAAe;IAAG,CAAC;IACtF;;;;OAIG;IACH,OAAO;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gDAAgD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9G,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,KAAY,EAAE,IAAU;QAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC7E,CAAC;CACJ,CAAA;AA5BY,iBAAiB;IAvB7B,qBAAc,CAAC;QACZ,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;YACL,qBAAY;YACZ,iBAAU,CAAC,SAAS,CAAC,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,mBAAW;SACd;QACD,YAAY,EAAE;YACV,sBAAS,EAAE,2BAAe,EAAE,2BAAe,EAAE,kCAAmB,EAAE,8BAAkB,EAAE,iCAAkB;YACxG,kCAAe,EAAE,iCAAqB,EAAE,iCAAqB,EAAE,wCAAyB,EAAE,oCAAwB;YAClH,uCAAwB;YACxB,sBAAS,EAAE,2BAAe,EAAE,2BAAe,EAAE,kCAAmB,EAAE,8BAAkB,EAAE,iCAAkB;SAC3G;QACD,SAAS,EAAE;YACP,wBAAiB;YACjB,0BAAW;YACX,EAAE,OAAO,EAAE,2CAAmB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;YAC7F,sCAAiB;YACjB,EAAE,OAAO,EAAE,uDAAyB,EAAE,UAAU,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;YACzG,0BAAW;YACX,EAAE,OAAO,EAAE,2CAAmB,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;SAChG;KACJ,CAAC;qCAQmC,wBAAiB,EAAmB,sBAAa;GAPzE,iBAAiB,CA4B7B;AA5BY,8CAAiB","sourcesContent":["import { HapinessModule, HttpServerService, OnError, OnStart } from '@hapiness/core';\nimport { LoggerModule, LoggerService } from '@hapiness/logger';\nimport { Observable } from 'rxjs/Observable';\nimport {SwagModule} from '@hapiness/swag';\nimport {Config} from '@hapiness/config';\nimport {MongoClientService, MongoModule} from '@hapiness/mongo';\nimport {RoomModel} from './models/room/room.model';\nimport {GetAllRoomRoute} from './routes/room/get/all.route';\nimport {GetOneRoomRoute} from './routes/room/get/one.route';\nimport {PostCreateRoomRoute} from './routes/room/post/create.route';\nimport {DeleteOneRoomRoute} from './routes/room/delete/one.route';\nimport {PutUpdateRoomRoute} from './routes/room/put/update.route';\nimport {RoomDocumentService} from './services/room-document/room-document.service';\nimport {RoomService} from './services/room/room.service';\nimport {GetAllIngredientRoute} from './routes/ingredient/get/all.route';\nimport {GetOneIngredientRoute} from './routes/ingredient/get/one.route';\nimport {PostCreateIngredientRoute} from './routes/ingredient/post/create.route';\nimport {DeleteOneIngredientRoute} from './routes/ingredient/delete/one.route';\nimport {PutUpdateIngredientRoute} from './routes/ingredient/put/update.route';\nimport {IngredientModel} from './models/ingredient/ingredient.model';\nimport {IngredientService} from './services/ingredient/ingredient.service';\nimport {IngredientDocumentService} from './services/ingredient-document/ingredient-document.service';\nimport {DishDocumentService} from './services/dish-document/dish-document.service';\nimport {GetAllDishRoute} from './routes/dish/get/all.route';\nimport {GetOneDishRoute} from './routes/dish/get/one.route';\nimport {PostCreateDishRoute} from './routes/dish/post/create.route';\nimport {DeleteOneDishRoute} from './routes/dish/delete/one.route';\nimport {PutUpdateDishRoute} from './routes/dish/put/update.route';\nimport {DishModel} from './models/dish/dish.model';\nimport {DishService} from './services/dish/dish.service';\n\nconst roomDocumentFactory = (mongoClientService: MongoClientService) => new RoomDocumentService(mongoClientService);\nconst ingredientDocumentFactory = (mongoClientService: MongoClientService) => new IngredientDocumentService(mongoClientService);\nconst dishDocumentFactory = (mongoClientService: MongoClientService) => new DishDocumentService(mongoClientService);\n\n@HapinessModule({\n    version: '1.0.0',\n    imports: [\n        LoggerModule,\n        SwagModule.setConfig(Config.get('swag')),\n        MongoModule\n    ],\n    declarations: [\n        RoomModel, GetAllRoomRoute, GetOneRoomRoute, PostCreateRoomRoute, DeleteOneRoomRoute, PutUpdateRoomRoute,\n        IngredientModel, GetAllIngredientRoute, GetOneIngredientRoute, PostCreateIngredientRoute, DeleteOneIngredientRoute,\n        PutUpdateIngredientRoute,\n        DishModel, GetAllDishRoute, GetOneDishRoute, PostCreateDishRoute, DeleteOneDishRoute, PutUpdateDishRoute\n    ],\n    providers: [\n        HttpServerService,\n        RoomService,\n        { provide: RoomDocumentService, useFactory: roomDocumentFactory, deps: [MongoClientService] },\n        IngredientService,\n        { provide: IngredientDocumentService, useFactory: ingredientDocumentFactory, deps: [MongoClientService] },\n        DishService,\n        { provide: DishDocumentService, useFactory: dishDocumentFactory, deps: [MongoClientService] },\n    ]\n})\nexport class ApplicationModule implements OnStart, OnError {\n    /**\n     * Class constructor\n     *\n     * @param {HttpServerService} _httpServer wrapper for instance of original Hapi server\n     * @param {LoggerService} _logger\n     */\n    constructor(private _httpServer: HttpServerService, private _logger: LoggerService) {}\n    /**\n     * On start process\n     *\n     * @return {void | Observable<any>}\n     */\n    onStart(): void | Observable<any> {\n        this._logger.info(`< Application.bootstrap > Server started at: ${this._httpServer.instance().info.uri}`);\n    }\n\n    /**\n     * On error process\n     *\n     * @param {Error} error\n     * @param data\n     *\n     * @return {void | Observable<any>}\n     */\n    onError(error: Error, data?: any): void | Observable<any> {\n        this._logger.error('A problem occurred during application\\'s lifecycle');\n    }\n}\n"]}
>>>>>>> f80cfbdc7a28c2093b76456f8394e2100993ed95
