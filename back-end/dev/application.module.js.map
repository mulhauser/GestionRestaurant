{"version":3,"file":"application.module.js","sourceRoot":"","sources":["../src/application.module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAqF;AACrF,6CAA+D;AAC/D,yCAA4C;AAC5C,6CAA0C;AAC1C,2CAAkE;AAElE,qCAOkB;AAClB,yCAAkE;AAClE,qCAAuC;AAEvC,qFAAqF;AACrF,2FAA2F;AAC3F,MAAM,qBAAqB,GAAG,CAAC,kBAAsC,EAAE,EAAE,CAAC,IAAI,gCAAqB,CAAC,kBAAkB,CAAC,CAAC;AAmBxH,IAAa,iBAAiB,GAA9B;IACI;;;;;OAKG;IACH,YAAoB,WAA8B,EAAU,OAAsB;QAA9D,gBAAW,GAAX,WAAW,CAAmB;QAAU,YAAO,GAAP,OAAO,CAAe;IAClF,CAAC;IAED;;;;OAIG;IACH,OAAO;QACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gDAAgD,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC9G,CAAC;IAED;;;;;;;OAOG;IACH,OAAO,CAAC,KAAY,EAAE,IAAU;QAC5B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC7E,CAAC;CACJ,CAAA;AA9BY,iBAAiB;IAjB7B,qBAAc,CAAC;QACZ,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;YACL,qBAAY;YACZ,iBAAU,CAAC,SAAS,CAAC,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,mBAAW;SACd;QACD,YAAY,EAAE;YACV,2BAAkB,EAAE,0BAAiB,EAAE,0BAAiB,EAAE,8BAAqB,EAAE,6BAAoB,EAAE,6BAAoB;YAC3H,oBAAW;SACd;QACD,SAAS,EAAE;YACP,wBAAiB;YACjB,wBAAa;YACb,EAAE,OAAO,EAAE,gCAAqB,EAAE,UAAU,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,0BAAkB,CAAC,EAAE;SACpG;KACJ,CAAC;qCAQmC,wBAAiB,EAAmB,sBAAa;GAPzE,iBAAiB,CA8B7B;AA9BY,8CAAiB","sourcesContent":["import { HapinessModule, HttpServerService, OnError, OnStart } from '@hapiness/core';\r\nimport { LoggerModule, LoggerService } from '@hapiness/logger';\r\nimport { SwagModule } from '@hapiness/swag';\r\nimport { Config } from '@hapiness/config';\r\nimport { MongoClientService, MongoModule } from '@hapiness/mongo';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {\r\n    GetHelloWorldRoute,\r\n    GetAllPeopleRoute,\r\n    GetOnePeopleRoute,\r\n    PostCreatePeopleRoute,\r\n    PutUpdatePeopleRoute,\r\n    DeleteOnePeopleRoute\r\n} from './routes';\r\nimport { PeopleService, PeopleDocumentService } from './services';\r\nimport { PeopleModel } from './models';\r\n\r\n// factory to declare dependency between PeopleDocumentService and MongoClientService\r\n// we use it to be sure that MongoClientService will be loaded before PeopleDocumentService\r\nconst peopleDocumentFactory = (mongoClientService: MongoClientService) => new PeopleDocumentService(mongoClientService);\r\n\r\n@HapinessModule({\r\n    version: '1.0.0',\r\n    imports: [\r\n        LoggerModule,\r\n        SwagModule.setConfig(Config.get('swag')),\r\n        MongoModule\r\n    ],\r\n    declarations: [\r\n        GetHelloWorldRoute, GetAllPeopleRoute, GetOnePeopleRoute, PostCreatePeopleRoute, PutUpdatePeopleRoute, DeleteOnePeopleRoute,\r\n        PeopleModel\r\n    ],\r\n    providers: [\r\n        HttpServerService,\r\n        PeopleService,\r\n        { provide: PeopleDocumentService, useFactory: peopleDocumentFactory, deps: [MongoClientService] }\r\n    ]\r\n})\r\nexport class ApplicationModule implements OnStart, OnError {\r\n    /**\r\n     * Class constructor\r\n     *\r\n     * @param {HttpServerService} _httpServer wrapper for instance of original Hapi server\r\n     * @param {LoggerService} _logger\r\n     */\r\n    constructor(private _httpServer: HttpServerService, private _logger: LoggerService) {\r\n    }\r\n\r\n    /**\r\n     * On start process\r\n     *\r\n     * @return {void | Observable<any>}\r\n     */\r\n    onStart(): void | Observable<any> {\r\n        this._logger.info(`< Application.bootstrap > Server started at: ${this._httpServer.instance().info.uri}`);\r\n    }\r\n\r\n    /**\r\n     * On error process\r\n     *\r\n     * @param {Error} error\r\n     * @param data\r\n     *\r\n     * @return {void | Observable<any>}\r\n     */\r\n    onError(error: Error, data?: any): void | Observable<any> {\r\n        this._logger.error('A problem occurred during application\\'s lifecycle');\r\n    }\r\n}\r\n"]}